<?php
/**
 * @file keypic.module
 *
 * Integrate KeyPic web service to prevent spam content for Drupal sites.
 */

/**
 * Implements hook_permission().
 */
function keypic_permission() {
  return array(
    'administer keypic' => array(
      'title' => t('KeyPic Administration'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function keypic_menu() {
  $items['keypic/report-spam/%/%'] = array(
    'title' => 'Report spam to KeyPic',
    'access arguments' => array('administer comments'),
    'file' => 'keypic.pages.inc',
    'page callback' => 'keypic_report_spam_page_callback',
    'page arguments' => array(2)
  );

  $items['admin/config/people/captcha/keypic'] = array(
    'title' => 'KeyPic',
    'description' => 'Administer the KeyPic web service.',
    'access arguments' => array('administer keypic'),
    'file' => 'keypic.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('keypic_admin_settings_form'),
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/people/captcha/keypic/%'] = array(
    'title' => 'KeyPic',
    'access arguments' => array('administer keypic'),
    'file' => 'keypic.admin.inc',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('keypic_admin_form_id_settings_form'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements captcha.module\hook_captcha().
 */
function keypic_captcha($op, $captcha_type = '', $captcha_sid = NULL) {
  switch ($op) {
    case 'list':
      return array('KeyPic');

    case 'generate':
      // Keypic need form ID to display configured widget.
      $form_id = '';
      foreach (debug_backtrace() as $item) {
        if ($item['function'] === 'form_builder') {
          $form_id = $item['args'][0];
        }
      }
      return keypic_captcha_generate($captcha_sid, $form_id);
  }
}

/**
 * Generate keypic captcha.
 */
function keypic_captcha_generate($captcha_sid, $form_id = '') {
  module_load_include('php', 'keypic', 'Keypic');

  // Keypic needs agent.
  $agent[] = 'Drupal/7.x-1.x';
  $agent[] = 'Keypic PHP5 Class, Version: ' . Keypic::getVersion();
  $agent = implode(' | ', $agent);
  Keypic::setUserAgent("User-Agent: {$agent}");

  // Keypic needs formID
  $keypic_form_id = variable_get('keypic_form_id', '');
  if ($keypic_form_id) {
    Keypic::setFormID($keypic_form_id);
  }

  $result['solution'] = Keypic::getToken('');

  $widget_settings = variable_get('keypic_widget', array());
  $widget_settings = isset($widget_settings[$form_id]) ? $widget_settings[$form_id] : $widget_settings['default'];
  
  $widget_format = $widget_settings['format'];
  $widget_size = $widget_settings['size'];
  if ($widget_format === 'image') {
    $markup = Keypic::getImage($widget_size);
  }
  else {
    $markup = Keypic::getiFrame($widget_size);
  }

  $result['form']['keypic_image'] = array(
    '#type' => 'markup',
    '#markup' => $markup,
    '#weight' => -2,
  );
  $result['captcha_validate'] = 'keypic_captcha_challenge_validate';
  return $result;
}

/**
 * Captcha validating callback.
 */
function keypic_captcha_challenge_validate($solution, $response = '', $form, $form_state) {
  switch ($form_state['build_info']['form_id']) {
    case 'contact_personal_form':
    case 'contact_site_form':
      $callback = 'keypick_build_params_contact';
      break;
    case 'user_register_form':
      $callback = 'keypick_build_params_user_register';
      break;
    case 'user_pass':
      $callback = 'keypick_build_params_user_pass';
      break;
    case 'user_login':
    case 'user_login_block':
      $callback = 'keypick_build_params_user_login';
      break;
    default:
      $callback = 'keypick_build_params_default';
  }

  if ($form_state['build_info']['base_form_id']) {
    $callback = 'keypick_build_params_comment';
  }

  $token = $solution;
  list($email, $name, $mesasge) = $callback($form, $form_state);

  module_load_include('php', 'keypic', 'Keypic');
  $response = Keypic::isSpam($token, $email, $name, $mesasge);
  if (is_numeric($response)) {
    // Check form ID.
    if ($keypic_form_id = variable_get('keypic_form_id', '')) {
      $status = Keypic::checkFormID($keypic_form_id);
      if ($status['status'] !== 'response') {
        throw new Exception($status['error']);
      }
    }

    // Allow other module to invoke to this event
    module_invoke_all('keypic_validate', $response, $token, $form, $form_state);

    // Get configuration
    $conf_min = variable_get('keypic_spam_point', 70);

    return $response < $conf_min;
  }
  throw new Exception($response);
}

/**
 * Param builder for contact form.
 */
function keypick_build_params_contact($form, $form_state) {
  $name = $form_state['value']['name'];
  $mail = $form_state['value']['mail'];
  $message = $form_state['value']['message'];
  return array($mail, $name, $message);
}

/**
 * Param builder for user register form.
 */
function keypick_build_params_user_register($form, $form_state) {
  $email = $form_state['values']['mail'];
  $name  = $form_state['values']['name'];
  $msg   = '';
  return array($email, $name, $mesasge);
}

/**
 * Param builder for user password form.
 */
function keypick_build_params_user_pass($form, $form_state) {
  $value = $form_state['values']['name'];
  $email = valid_email_address($value) ? $value : '';
  $name  = empty($email) ? $value : '';
  $mesasge = '';
  return array($email, $name, $mesasge);
}

/**
 * Param builder for user login form.
 */
function keypick_build_params_user_login($form, $form_state) {
  return array($email = '', $form_state['values']['name'], $mesasge = '');
}

/**
 * Param builder for comment form.
 */
function keypick_build_params_comment($form, $form_state) {
  $value = &$form_state['values'];
  $email = !empty($value['mail']) ? $value['mail'] : $GLOBALS['user']->mail;
  $name  = $value['name'];
  $mesasge = '';
  if (!empty($value['comment_body'])) {
    // Before: $value['comment_body'][LANGUAGE_NONE][0]â€¦
    $mesasge = reset($value['comment_body']);
    // Before: $message[0]['value']
    $mesasge = reset($mesasge);
    // Before: $message['value']
    $mesasge = reset($mesasge);
  }

  return array($email, $name, $mesasge);
}

/**
 * Default param builder.
 */
function keypick_build_params_default($form, $form_state) {
  global $user;
  $email = $user->mail;
  $name = $user->name;
  $mesasge = '';
  foreach ($form_state['values'] as $key => $val) {
    $ignore = $key === 'submit';
    $ignore = $ignore || ($key === 'form_build_id');
    $ignore = $ignore || ($key === 'form_id');
    $ignore = $ignore || ($key === 'op');
    if ($ignore) continue;

    if (is_string($val)) {
      $mesasge .= $val . "\n";
    }
    else {
      $mesasge .= print_r($val, TRUE) . "\n";
    }
  }

  return array($email, $name, $mesasge);
}

/**
 * Load Keypic spam points of comments by comment IDs.
 */
function keypic_load_entities_points($entity_type, $entity_ids = array()) {
  if (empty($entity_ids)) {
    return array();
  }

  $select = db_select('keypic_log', 'kpc');
  $select->condition('kpc.entity_type', $entity_type);
  $select->condition('kpc.entity_id', $entity_ids);
  $select->fields('kpc', array('entity_id', 'token', 'form_id', 'point'));
  return $select->execute()->fetchAll();
}

/**
 * Get status by point.
 */
function keypic_get_status_info($point) {
  if ($point < 40) {
    return t("is not spam");
  }

  if ($point < 70) {
    return t("maybe spam");
  }

  return t('is spam');
}
