<?php
/**
 * @file
 * Provides a Drag & Drop widget for entity-reference fields
 */

/**
 * Implements hook_field_widget_info().
 */
function entityreference_dragdrop_field_widget_info() {
  return array(
    'entityreference_dragdrop' => array(
      'label' => t('Drag & Drop'),
      'field types' => array('entityreference'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function entityreference_dragdrop_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // If we have more than one element per page,
  // this element-counter keeps them seperated
  // @@TODO: Actually make this work!
  static $ec = 0;

  drupal_add_library('system', 'ui.sortable');

  $handler = entityreference_get_selection_handler($field, $instance);
  $options = $handler->getReferencableEntities();

  // Build an array of selected items in id=>labal format
  $selected = array();
  foreach ($items as $item) {
    if (array_key_exists($item['target_id'], $options)) {
      $selected[$item['target_id']] = $options[$item['target_id']];
    }
  }

  // Build HTML to represent available options that have not been selected
  $markup_available = '<ul data-ec="' . $ec . '" class="entityreference-dragdrop entityreference-dragdrop-available">';
  foreach ($options as $id => $label) {
    if (!array_key_exists($id, $selected)) $markup_available .= '<li data-ec="' . $ec . '" data-id="' . $id .'">' . $label . '</li>';
  }
  $markup_available .= '</ul>';

  // Build HTML to represent selected items
  $markup_selected  = '<ul data-ec="' . $ec . '" class="entityreference-dragdrop entityreference-dragdrop-selected">';
  foreach ($selected as $id => $label) {
    $markup_selected .=  '<li data-ec="' . $ec . '" data-id="' . $id . '">' . $label . '</li>';
  }
  $markup_selected  .= '</ul>';

  $element += array(
    '#type' => 'hidden',
    '#default_value' => implode(',',array_keys($selected)),
    '#element_validate' => array('entityreference_dragdrop_element_validate'),
    '#suffix' => $markup_available.$markup_selected.'<div class="entityreference-dragdrop-clear"></div>',
    '#attached' => array(
      'js' => array(drupal_get_path('module', 'entityreference_dragdrop') . '/entityreference_dragdrop.js'),
      'css' => array(drupal_get_path('module', 'entityreference_dragdrop') . '/entityreference_dragdrop.css'),
    ),
    '#attributes' => array('class' => array('entityreference-dragdrop-values')),
  );

  // Increment the element-counter
  $ec++;

  return $element;
}


/**
 * Formats the value array properly
 */
function entityreference_dragdrop_element_validate($element, &$form_state) {
  $value = array();
  if (!empty($element['#value'])) {
    $ids = explode(',',$element['#value']);
    $value = array();

    foreach ($ids as $id) {
      $value[] = array(
        'target_id' => $id,
      );
    }
  }

  // Update the value of this element so the field can validate the product IDs.
  form_set_value($element, $value, $form_state);
}
