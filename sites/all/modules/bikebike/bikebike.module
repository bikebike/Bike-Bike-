<?php

require_once('field_field/field_field.module');

function bikebike_menu_alter(&$items)
{
	$items['entityreference/autocomplete/single/%/%/%'] = array(
			'title' => 'Entity Reference Autocomplete',
			'page callback' => 'bikebike_autocomplete_callback',
			'page arguments' => array(2, 3, 4, 5),
			'access callback' => 'entityreference_autocomplete_access_callback',
			'access arguments' => array(2, 3, 4, 5),
			'type' => MENU_CALLBACK,
	);
	$items['node/add/workshop/%']['access callback'] = 'bikebike_add_workshop_access';
	$items['node/add/workshop/%']['access arguments'] = array('create', 'workshop', 3);
	$items['node/add/workshop/%']['title'] = t('Propose a Workshop');
	$items['node/add/event/%']['access callback'] = 'bikebike_add_event_access';
	$items['node/add/event/%']['access arguments'] = array('create', 'event', 3);
	return $items;
}

function bikebike_menu()
{
	$items = array
	(
		'organizations/%node/add-admin' => array
		(
			'title' => t('Request Membership'),
			'page callback' => 'drupal_get_form',
			'description' => 'Add yourself as an organization administrator',
			'page arguments' => array('bikebike_add_member', 1, false, 'organization'),
			'access callback' => 'bikebike_organization_add_member_access',
			'access arguments' => array(1),
			'type' => MENU_VISIBLE_IN_BREADCRUMB,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
		),
		'organizations/%node/remove-admin' => array
		(
			'title' => t('Revoke Membership'),
			'page callback' => 'drupal_get_form',
			'description' => 'Remove yourself as an organization administrator',
			'page arguments' => array('bikebike_add_member', 1, true, 'organization'),
			'access callback' => 'bikebike_organization_remove_member_access',
			'access arguments' => array(1),
			'type' => MENU_VISIBLE_IN_BREADCRUMB,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
		),
		'workshops/%node/add-coordinator' => array
		(
			'title' => t('Add Workshop Coordinator'),
			'page callback' => 'drupal_get_form',
			'description' => 'Add yourself as a workshop coordinator',
			'page arguments' => array('bikebike_add_member', 1, false, 'workshop'),
			'access callback' => TRUE,//'entityreference_autocomplete_access_callback',
			'type' => MENU_CALLBACK
		),
		'workshops/%node/remove-coordinator' => array
		(
			'title' => t('Remove Workshop Coordinator'),
			'page callback' => 'drupal_get_form',
			'description' => 'Remove yourself as a workshop coordinator',
			'page arguments' => array('bikebike_add_member', 1, true, 'workshop'),
			'access callback' => TRUE,//'entityreference_autocomplete_access_callback',
			'type' => MENU_CALLBACK
		),
		'conference-registration/%node/cancel' => array
		(
			'title' => t('Add Organization Administrator'),
			'page callback' => 'bikebike_change_registration',
			'page arguments' => array(1, false),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'conference-registration/%node/confirm' => array
		(
			'title' => 'Add Organization Administrator',
			'page callback' => 'bikebike_change_registration',
			'page arguments' => array(1, true),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'admin/config/system/gitpull' => array
		(
			'title' => 'Pull From Git Repository',
			'page callback' => 'bikebike_git_pull',
			'description' => 'Updates the site from the GitHub Repository',
			'page arguments' => array(),
			'access callback' => 'bikebike_git_pull_access',//array('access git pull'),
			'type' => MENU_NORMAL_ITEM
		),
		'conference-registration/%node/open' => array
		(
			'title' => 'Open Registraion',
			'page callback' => 'bikebike_conference_registration_open',
			'description' => 'Open Registration',
			'page arguments' => array(1, true),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'conference-registration/%node/close' => array
		(
			'title' => 'Close Registration',
			'page callback' => 'bikebike_conference_registration_open',
			'description' => 'Open Registration',
			'page arguments' => array(1, false),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'organizations/%node/cancel-request' => array
		(
			'title' => 'Cancel Membership Request',
			'page callback' => 'bikebike_cancel_request',
			'description' => 'Cancel your request to be an organization administrator',
			'page arguments' => array(1, 'organization'),
			'access callback' => 'bikebike_organization_cancel_request_access',
			'access arguments' => array(1),
			'type' => MENU_VISIBLE_IN_BREADCRUMB,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
		),
		'workshops/%node/cancel-request' => array
		(
			'title' => 'Cancel Workshop Coordinator Request',
			'page callback' => 'bikebike_cancel_request',
			'description' => 'Cancel your request to be an workshop coordinator',
			'page arguments' => array(1, 'workshop'),
			'access callback' => TRUE,//'entityreference_autocomplete_access_callback',
			'type' => MENU_CALLBACK
		),
		'organizations/%node/requests' => array
		(
			'title' => 'Membership Requests',
			'page callback' => 'drupal_get_form',
			'description' => 'Approve or Deny Membership to This Organization',
			'page arguments' => array('bikebike_requests_page', 'organization', 1),
			'access callback' => 'node_access',
			'access arguments' => array('update', 1),
			'type' => MENU_VISIBLE_IN_BREADCRUMB,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
		),
		'organizations/%node/members' => array
		(
			'title' => t('Members'),
			'page callback' => 'drupal_get_form',
			'description' => 'Approve or Deny Membership to This Organization',
			'page arguments' => array('bikebike_requests_page', 'organization', 1),
			'access callback' => 'node_access',
			'access arguments' => array('view', 1),
			'type' => MENU_VISIBLE_IN_BREADCRUMB,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
		),
		'workshops/%node/requests' => array
		(
			'title' => 'Users Requesting to Be Coordinators',
			'page callback' => 'drupal_get_form',
			'description' => 'Approve or Deny Coordinators for This Workshop',
			'page arguments' => array('bikebike_requests_page', 'workshop', 1),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'organizations/%node/invitations' => array
		(
			'title' => 'Membership Invitations',
			'page callback' => 'drupal_get_form',
			'description' => 'Manage Membership Invitations',
			'page arguments' => array('bikebike_invitations_page', 'organization', 1),
			'access callback' => 'node_access',
			'access arguments' => array('update', 1),
			'type' => MENU_VISIBLE_IN_BREADCRUMB,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
		),
		'workshops/%node/invitations' => array
		(
			'title' => 'Coordinator Invitations',
			'page callback' => 'drupal_get_form',
			'description' => 'Manage Coordinator Invitations',
			'page arguments' => array('bikebike_invitations_page', 'workshop', 1),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'organizations/%node/accept-invitation/%' => array
		(
			'title' => 'Accept Membership',
			'page callback' => 'bikebike_accept_invitation',
			'page arguments' => array('organization', 1, 3, true),
			'access callback' => 'bikebike_organization_accept_invitation_access',
			'access arguments' => array(1),
			'type' => MENU_VISIBLE_IN_BREADCRUMB,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
		),
		'workshops/%node/accept-invitation/%' => array
		(
			'title' => 'Accept Workshop Coordinator Invitation',
			'page callback' => 'bikebike_accept_invitation',
			'page arguments' => array('workshop', 1, 3, true),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'organizations/%node/reject-invitation/%' => array
		(
			'title' => 'Reject Organization Member Invitation',
			'page callback' => 'bikebike_accept_invitation',
			'page arguments' => array('organization', 1, 3, false),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'workshops/%node/reject-invitation/%' => array
		(
			'title' => 'Reject Workshop Coordinator Invitation',
			'page callback' => 'bikebike_accept_invitation',
			'page arguments' => array('workshop', 1, 3, false),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'conferences/%node/registration' => array
		(
			'title' => 'Registration',
			'page callback' => 'drupal_get_form',
			'description' => 'Register for this Conference',
			'page arguments' => array('bikebike_registration_page', 1),
			'access callback' => 'bikebike_conference_registration_access',
			'access arguments' => array(1),
			'type' => MENU_CALLBACK
		),
		'conferences/%node/registration/manage' => array
		(
			'title' => 'Registration Options',
			'page callback' => 'drupal_get_form',
			'description' => '',
			'page arguments' => array('bikebike_registration_options_page', 1),
			'access callback' => 'bikebike_conference_access',
			'access arguments' => array(1),
			'type' => MENU_VISIBLE_IN_BREADCRUMB,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
		),
		'conferences/%node/registration/fields' => array
		(
			'title' => 'Registration Form Fields',
			'page callback' => 'bikebike_registration_fields_page',
			'description' => '',
			'page arguments' => array(1),
			'access callback' => 'bikebike_conference_access',
			'access arguments' => array(1),
			'type' => MENU_VISIBLE_IN_BREADCRUMB,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
		),
		'conferences/%node/registration/registrations' => array
		(
			'title' => 'Registrations',
			'page callback' => 'bikebike_registration_registrations_page',
			'description' => '',
			'page arguments' => array(1),
			'access callback' => 'bikebike_conference_access',
			'access arguments' => array(1),
			'type' => MENU_VISIBLE_IN_BREADCRUMB,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
		),
		'conferences/%node/schedule' => array
		(
			'title' => 'Schedule',
			'page callback' => 'bikebike_schedule_page',
			'description' => 'Schedule',
			'page arguments' => array(1),
			'access callback' => 'bikebike_conference_schedule_access',
			'access arguments' => array(1),
			'type' => MENU_VISIBLE_IN_BREADCRUMB,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
		),
		'conferences/%node/schedule/manage' => array
		(
			'title' => 'Manage Conference Schedule',
			'page callback' => 'drupal_get_form',
			'description' => 'Work out your conference schedule',
			'page arguments' => array('bikebike_scheduler_page', 1),
			'access callback' => 'bikebike_conference_access',
			'access arguments' => array(1),
			'type' => MENU_CALLBACK
		),
		'conferences/%node/schedule/manage/conflicts' => array
		(
			'title' => t('Manage Conference Schedule'),
			'page callback' => 'bikebike_scheduler_page_conflicts',
			//'description' => 'Work out your conference schedule',
			'page arguments' => array(1),
			'access callback' => 'bikebike_conference_access',
			'access arguments' => array(1),
			'type' => MENU_CALLBACK
		),
		'conferences/%node/workshops' => array
		(
			'title' => t('Workshops'),
			'page callback' => 'bikebike_conference_workshops',
			//'description' => 'Work out your conference schedule',
			'page arguments' => array(1),
			'access callback' => TRUE,
			'type' => MENU_VISIBLE_IN_BREADCRUMB,
			'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
		)
	);
	return $items;
}

function bikebike_organization_cancel_request_access($node)
{
	global $user;
	return bikebike_create_request_exists($node, $user);
}

function bikebike_organization_add_member_access($node)
{
	global $user;
	return !bikebike_organization_cancel_request_access($node) && bikebike_node_access($node, 'update', $user) != NODE_ACCESS_ALLOW;
}

function bikebike_organization_remove_member_access($node)
{
	global $user;
	return bikebike_node_access($node, 'update', $user) == NODE_ACCESS_ALLOW && count($node->field_administrators['und']) > 1;
}

function bikebike_conference_access($node)
{
	global $user;
	return _bikebike_is_conference_organizer($user, $node);
}

function _bikebike_is_registration_open($node)
{
	return isset($node->field_registration_open[$node->language]) && $node->field_registration_open[$node->language][0]['value'] == 1;
}

function _bikebike_is_schedule_published($node)
{
	return isset($node->field_workshops_published[$node->language]) && $node->field_workshops_published[$node->language][0]['value'] == 1;
}

function bikebike_conference_registration_access($node)
{
	global $user;
	return _bikebike_is_registration_open($node) || _bikebike_is_conference_organizer($user, $node);
}

function bikebike_conference_schedule_access($node)
{
	global $user;
	return _bikebike_is_schedule_published($node) || _bikebike_is_conference_organizer($user, $node);
}

function bikebike_conference_registration_open($reg, $do_open)
{
	//$reg = node_load($nid);
	global $user;
	if (!$reg || $reg->type != 'conference' || !node_access('update', $reg))
	{
		drupal_set_message('You do not have sufficient privledges to edit this conference.', 'warning');
		drupal_goto('conferences');
	}
	else
	{
		$reg->field_registration_open[$reg->language][0]['value'] = ($do_open ? 1 : 0);
		node_save($reg);
		drupal_set_message('Registration is now '.($do_open ? 'open.' : 'closed.'));
		drupal_goto('node/'.$reg->nid);
	}
}

function bikebike_schedule_page($node)
{
	
}

function bikebike_registration_registrations_page($node)
{
	
}

function bikebike_registration_fields_page($node)
{
	$items = array();
	
	$view = views_get_view('form_fields');
	
	$items['workshops'] = array
	(
		'#type' => 'markup',
		'#markup' => $view->preview('block', array())
	);
	return $items;
}

function bikebike_registration_options_page($form, &$form_state, $args)
{
	$node = $args;
	$nid = $node->nid;
	
	if (!$node || $node->type != 'conference')
	{
		return;
	}
	
	module_load_include('inc', 'node', 'node.pages');
	$form = node_form($form, $form_state, $node);
	
	foreach ($form as $field_name => $field)
	{
		if (is_array($field) && isset($field['#type']))
		{
			if (!in_array($field_name, array('field_registration_open', 'field_fields')))
			{
				$form[$field_name]['#access'] = FALSE;
			}
		}
	}
	
	form_load_include($form_state, 'inc', 'node', 'node.pages');

	$form['save'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
		'#weight' => 100,
		'#submit' => array('node_form_submit', 'bikebike_registration_options_page_submit')
	);
	
	//$form_state['redirect'] = 'conferences/'.$nid.'/registration/manage';
		
	return $form;
}

function bikebike_registration_options_page_submit(&$form, &$form_state)
{
	$form_state['redirect'] = 'conferences/'.$form_state['node']->nid.'/registration/manage';
}

function theme_form_table_theme_name($vars)
{
	$element = $vars['element'];
	//drupal_add_tabledrag('form_id', 'order', 'sibling', 'rank-weight'); // needed for table dragging
	drupal_add_tabledrag('form_id', 'match', 'sibling', 'rank-region', 'rank-region-included', NULL, FALSE);
	drupal_add_tabledrag('form_id', 'match', 'sibling', 'rank-region', 'rank-region-excluded', NULL, FALSE);
	drupal_add_tabledrag('form_id', 'order', 'sibling', 'rank-weight', 'rank-weight-included', NULL, FALSE); // needed for table dragging
	drupal_add_tabledrag('form_id', 'order', 'sibling', 'rank-weight', 'rank-weight-excluded', NULL, FALSE); // needed for table dragging
	
	$header = array(
		'name' => t('Question'),
		'type' => t('Type'),
		'weight' => t('Weight'),
		'region' => t('Region'),
	);

	$rows = array();
	foreach (element_children($element) as $key) {
		$row = array();

		$row['data'] = array();
		foreach ($header as $fieldname => $title)
		{
			$row['data'][] = drupal_render($element[$key][$fieldname]);
			$row['class'] = array('draggable'); // needed for table dragging
		}
		$rows[] = $row;
	}

	return theme('table', array(
			'header' => $header,
			'rows' => $rows,
			'attributes' => array('id' => 'form_id'), // needed for table dragging
	));
}

function bikebike_conference_workshops($nid)
{
	$items = array();
	$items['workshops'] = array
	(
		'#type' => 'markup',
    	'#markup' => '<p>Hey there...</p>'//drupal_render(user_view(user_load($request->uid), 'entityreference_view_widget'))
	);
	return $items;
}

function bikebike_change_registration($reg, $confirm)
{
	//$reg = node_load($crid);
	global $user;
	if (!$reg || $user->uid != $reg->uid || $reg->type != 'conference-registration')
	{
		drupal_set_message('The provided registration does not belong to you.', 'warning');
		drupal_goto('conferences');
	}
	else
	{
		$reg->field_attending_conference[$reg->language][0]['value'] = ($confirm ? 1 : 0);
		node_save($reg);
		drupal_set_message('Your registration has been '.($confirm ? 'confirmed.' : 'cancelled.'));
		drupal_goto('node/'.$reg->nid);
	}
}

function bikebike_git_pull_access()
{
	global $user;
	return in_array('administrator', array_values($user->roles));
}

function bikebike_permission()
{
	return array(
		'write privatemsg to organizations' => array(
			'title' => t('Write private message to organizations'),
			'description' => t('Allows to write messages to all users which belong to a specific organization.'),
		),
		'view organizations recipients' => array(
			'title' => t('View organizations recipients'),
			'description' => t('Ability to view roles recipients and the name of these organizations.'),
		),
		'access git pull' => array(
			'title' => t('Access Pull From Git'),
			'description' => t('Access Pull From Git Repository.'),
		)
	);
}

function bikebike_git_pull()
{
	drupal_set_message('> git pull origin master <pre style="margin-left: 15px;">'.shell_exec('git pull origin master').'</pre>');
	
	module_load_include('module', 'backup_migrate');
	module_load_include('inc', 'backup_migrate', 'includes/destinations');
	module_load_include('inc', 'backup_migrate', 'includes/profiles');
	$location = drupal_realpath(backup_migrate_create_destination('file_manual', array('destination_id' => 'manual'))->location);

	$settings = _backup_migrate_profile_saved_default_profile(NULL);
	
	$files = glob("$location/*.aes");
	usort($files, function($a, $b) { return filemtime($a) < filemtime($b); });
	$scripts = 0;
	foreach ($files as $file)
	{
		$basename = basename($file);
		if (!db_query("SELECT COUNT(filename) FROM {backup_migrate_history} WHERE filename='$basename'")->fetchField())
		{
			backup_migrate_perform_restore('manual', $file, $settings);
			db_query("INSERT INTO {backup_migrate_history} (filename, date) VALUES ('$basename', NOW())");
			$scripts++;
		}
	}
	drupal_set_message(($scripts ?: 'No').' migration script'.($scripts === 1 ? '' : 's').' executed');
	variable_set('file_temporary_path', '/tmp');
	cache_clear_all();
	drupal_goto('admin/config/system/backup_migrate/destination/list/files/manual');
}

function bikebike_add_event_access($action, $type, $conference_id)
{
	global $user;
	
	if (in_array('administrator', array_values($user->roles)))
	{
		return TRUE;
	}
	
	if (!$conference_id)
	{
		return FALSE;
	}
	$node = node_load($conference_id);
	return bikebike_node_access($node, 'update', $user) == NODE_ACCESS_ALLOW;
}

function bikebike_add_workshop_access($action, $type, $conference_id)
{
	global $user;
	
	if (in_array('administrator', array_values($user->roles)))
	{
		return TRUE;
	}
	
	if (!$conference_id)
	{
		return FALSE;
	}
	$reg = _bikebike_get_registation($user->uid, $conference_id);
	return ($reg && $reg[0]->data == 'yes' ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY);
	/*$r = db_query("
			SELECT
				nid
			FROM
				{node}
			JOIN
				{field_data_field_conference} AS conference
				ON
					conference.entity_id = nid
			JOIN
				{field_data_field_attending_conference} AS attending
				ON
					attending.entity_id = nid
			WHERE
				type = 'conference_registration'
				AND
				uid = :uid
				AND
				field_conference_nid = :nid
				AND
				attending.field_attending_conference_value <> 0
			LIMIT
				1",
			array('uid' => $user->uid, 'nid' => $conference_id));
	return $r->rowCount() > 0;*/
}

function bikebike_node_access($node, $op, $user)
{
	if (in_array('administrator', array_values($user->roles)))
	{
		return NODE_ACCESS_ALLOW;
	}
	
	if ($node && is_array($node) && isset($node['target_id']))
	{
		$node = node_load($node['target_id']);
	}
	
	if ($op == 'update')
	{
		if (is_string($node))
		{
			// check to see if the user is allowed to create a node
			return NODE_ACCESS_IGNORE;
		}
		
		if (!$node || !is_object($node))
		{
			return NODE_ACCESS_DENY;
		}
		
		switch ($node->type)
		{
			case 'organization':
				foreach ((isset($node->field_administrators[$node->language]) ? $node->field_administrators[$node->language] : array()) as $admin)
				{
					if ($admin['target_id'] == $user->uid)
					{
						return NODE_ACCESS_ALLOW;
					}
				}
				return NODE_ACCESS_DENY;
			case 'workshop':
				foreach ((isset($node->field_coordinators[$node->language]) ? $node->field_coordinators[$node->language] : array()) as $admin)
				{
					if ($admin['target_id'] == $user->uid)
					{
						return NODE_ACCESS_ALLOW;
					}
				}
				return NODE_ACCESS_DENY;
			case 'conference':
				foreach ((isset($node->field_host_organizations[$node->language]) ? $node->field_host_organizations[$node->language] : array()) as $org)
				{
					if (bikebike_node_access($org, $op, $user) == NODE_ACCESS_ALLOW)
					{
						return NODE_ACCESS_ALLOW;
					}
				}
				return NODE_ACCESS_DENY;
		}
	}
	else if ($op == 'view')
	{
		switch ($node->type)
		{
			case 'conference_registration':
				if ($node->uid == $user->uid)
				{
					return NODE_ACCESS_ALLOW;
					
				}
				return node_access($op, node_load($node->field_conference[$node->language][0]['nid']));
		}
	}
	else
	{
		//drupal_set_message($node);
		//_bikebike_show_object($node);
		switch ($node)
		{
			case 'form_field':
				return NODE_ACCESS_ALLOW;
			case 'workshop':
				$nid = null;
				if (arg(0) == 'node' && is_numeric(arg(1)))
				{
					$nid = arg(1);
				}
				else if (is_numeric(arg(3)))
				{
					$nid = arg(3);
				}
				if (!$nid)
				{
					return NODE_ACCESS_DENY;
				}
				$reg = _bikebike_get_registation($user->uid, $nid);
				return ($reg && $reg[0]->data == 'yes' ? NODE_ACCESS_ALLOW : NODE_ACCESS_DENY);
		}
	}
	return NODE_ACCESS_IGNORE;
}

function _bikebike_is_current_conference_organizer($user)
{
	/// TODO: Yup...
}

function _bikebike_is_conference_organizer($user, $conference)
{
	foreach ((isset($conference->field_host_organizations[$conference->language]) ? $conference->field_host_organizations[$conference->language] : array()) as $org)
	{
		if (bikebike_node_access($org, 'update', $user) == NODE_ACCESS_ALLOW)
		{
			return true;
		}
	}
	return false;
}

function _bikebike_show_object($object)
{
	drupal_set_message('<pre>'.print_r($object, true).'</pre>');
}

function bikebike_requests_page_submit(&$form, &$form_state)
{
	$nid = $form['nid']['#value'];
	$node = node_load($nid);
	$request = node_load($form_state['clicked_button']['#array_parents'][1]);
	$accepted = ($form_state['clicked_button']['#parents'][0] == 'accept');
	
	$user = user_load($request->uid);
	switch ($node->type)
	{
		case 'organization':
		case 'workshop':
			$field = $node->type == 'organization' ? 'field_administrators' : 'field_coordinators';
			$already_admin = false;
			foreach ((isset($node->{$field}['und']) ? $node->{$field}['und'] : array()) as $admin)
			{
				if ($admin['target_id'] == $user->uid)
				{
					$alreadyadmin = true;
				}
			}
			if (!$already_admin)
			{
				$node->{$field}['und'][] = array('target_id' => $user->uid);
				node_save($node);
			}
			break;
	}
	$request->field_state['und'][0]['value'] = ($accepted ? 1 : -1);
	node_save($request);
	drupal_set_message($user->name.'\'s request to join '.$node->title.' has been '.($accepted ? 'accepted.' : 'denied.'));
	
	$form_state['redirect'] = $form['request_count']['#value'] > 1 ? null : 'node/'.$nid;
}

function bikebike_requests_page($form_state, $args)
{
	$node = $args['build_info']['args'][1];
	$nid = $node->nid;
	//$node = node_load($nid);
	if (!$node || $node->type != $args['build_info']['args'][0])
	{
		return;
	}
	
	$language = $node->language;
	
	$form['members']['list'] = array
	(
		'#type' => 'fieldset',
		'#title' => t('Members:'),
		'#tree' => TRUE
	);

	$markup = '<ul class="profile-list">';
	foreach ($node->field_administrators[$node->language] as $uid)
	{
		$u = user_load($uid['target_id']);
		$markup .= '<li>'.l(drupal_render(user_view($u, 'entityreference_view_widget')), 'user/'.$uid['target_id'], array('html' => TRUE)).'</a></li>';
	}
	$markup .= '</ul></div>';
	
	$form['members']['list'] = array
	(
		//'#type' => 'fieldset',
		//'#title' => t('Requests:'),
		//'#tree' => TRUE
		'#type' => 'markup',
		'#markup' => $markup
	);
	
	$r = db_query("
			SELECT
				node.nid
			FROM
				{node}
			JOIN
				{field_data_field_node} AS n
				ON
					n.entity_id = node.nid
			JOIN
				{field_data_field_invitation} AS invite
				ON
					invite.entity_id = node.nid
			JOIN
				{field_data_field_state} AS state
				ON
					state.entity_id = node.nid
			WHERE
				type = 'request'
				AND
				n.field_node_nid = :nid
				AND
				invite.field_invitation_value = 0
				AND
				state.field_state_value = 0
			",
			array('nid' => $nid));
	
	$form['requests'] = array
	(
		'#type' => 'fieldset',
		'#title' => t('Requests:'),
		'#tree' => TRUE
	);
	
	foreach ($r as $result)
	{
		//drupal_set_message('<pre>'.print_r($result))
		$request = node_load($result->nid);
		$form['requests'][$request->nid] = array
		(
			'#type' => 'fieldset',
			//'#title' => t('Requests:'),
			'#tree' => FALSE
		);
		$form['requests'][$request->nid]['nid'] = array
		(
			'#type' => 'value',
			'#value' => $request->nid
		);
		$form['requests'][$request->nid]['user'] = array
		(
			'#type' => 'markup',
	    	'#markup' => drupal_render(user_view(user_load($request->uid), 'entityreference_view_widget'))
		);
		$form['requests'][$request->nid]['message'] = array
		(
			'#type' => 'markup',
			//'#title' => t('Message:'),
			'#markup' => '<label>Message:</label><p>'.$request->body['und'][0]['value'].'</p>'
		);
		$form['requests'][$request->nid]['accept'] = array(
			'#type' => 'submit',
			'#value' => t('Accept')//,
			//'#submit' => array('bikebike_add_org_admin_request'),
			//'#limit_validation_errors' => array()
		);
		$form['requests'][$request->nid]['deny'] = array(
			'#type' => 'submit',
			'#value' => t('Deny'),
			'#attributes' => array('class' => array('negative'))//,
			//'#submit' => array('bikebike_add_org_admin_cancel'),
			//'#limit_validation_errors' => array()
		);	
	}
	
	$form['nid'] = array
	(
		'#type' => 'value',
		'#value' => $nid
	);
	$form['request_count'] = array
	(
		'#type' => 'value',
		'#value' => $r->rowCount()
	);
	$form['#method'] = 'post';
  	$form['#redirect'] = 'node/'.$nid;
	return $form;
}

function bikebike_get_invitation($node, $email)
{
	$r = db_query("
			SELECT
				node.nid
			FROM
				node
			JOIN
				field_data_field_node AS n
				ON
					n.entity_id = node.nid
			JOIN
				field_data_field_invitation AS invite
				ON
					invite.entity_id = node.nid
			JOIN
				field_data_field_state AS state
				ON
					state.entity_id = node.nid
			JOIN
				field_data_field_email_address AS email
				ON
					email.entity_id = node.nid
			WHERE
				type = 'request'
				AND
				n.field_node_nid = :nid
				AND
				email.field_email_address_email = :email
				AND
				invite.field_invitation_value = 1
				AND
				state.field_state_value = 0
			LIMIT
				1
			",
			array('nid' => is_object($node) ? $node->nid : $node, 'email' => $email));
	return $r->rowCount() > 0 ? node_load($r->fetchField()) : null;
}

function bikebike_accept_invitation($type, $nid, $request_title, $do_accept)
{
	global $user;
	if (!$user)
	{
		// TODO: Handle this case, we should probably promt to log in, then redirect here again
	}
	else
	{
		$node = $nid; $nid = $node->nid;//node_load($nid);
		$invitation = bikebike_get_invitation($node, $user->mail);
		$invite_node = $invitation ? node_load($invitation->field_node['und'][0]['nid']) : null;
		if (!$invitation || $type != $invite_node->type || $invitation->title !== $request_title)
		{
			drupal_set_message('Invitation does not exist', 'error');
		}
		else
		{
			if ($do_accept)
			{
				switch ($node->type)
				{
					case 'organization':
					case 'workshop':
						$field = $node->type == 'organization' ? 'field_administrators' : 'field_coordinators';
						$already_admin = false;
						foreach ((isset($node->{$field}['und']) ? $node->{$field}['und'] : array()) as $admin)
						{
							if ($admin['target_id'] == $user->uid)
							{
								$alreadyadmin = true;
							}
						}
						if (!$already_admin)
						{
							$node->{$field}['und'][] = array('target_id' => $user->uid);
							node_save($node);
						}
						break;
				}
				drupal_set_message('Succesfully added as a '.($type == 'organization' ? 'member' : 'coordinator').' of '.$node->title);
			}
			else
			{
				drupal_set_message('You have rejected your invitation.');
			}
			$invitation->field_state['und'][0]['value'] = ($do_accept ? 1 : -1);
			node_save($invitation);
			drupal_goto('node/'.$nid);
		}
	}
}

function _bikebike_user_load_from_email($email)
{
	$r = db_query('SELECT uid FROM users WHERE users.mail = :email LIMIT 1', array('email' => $email));
	if ($r->rowCount() > 0)
	{
		return user_load($r->fetchField());
	}
	return $email;
}

function _bikebike_coordinator_overlap($workshopA, $workshopB)
{
	$overlap = array();
	foreach ((isset($workshopA->field_coordinators['und']) ? $workshopA->field_coordinators['und'] : array()) as $coordinatorA)
	{
		foreach ((isset($workshopB->field_coordinators['und']) ? $workshopB->field_coordinators['und'] : array()) as $coordinatorB)
		{
			if ($coordinatorA['target_id'] == $coordinatorB['target_id'])
			{
				$overlap[] = $coordinatorA['target_id'];
			}
		}
	}
	return $overlap;
}

function bikebike_scheduler_page_conflicts($nid)
{
	global $user;
	$node = $nid; $nid = $node->nid;//node_load($nid);
	if (!$node || $node->type != 'conference')
	{
		return;
	}
	$language = $node->language;
	$schedule = array();
	$start = new DateTime($node->field_date[$language][0]['value']);
	$end = new DateTime($node->field_date[$language][0]['value2']);
	$start_t = strtotime($node->field_date[$language][0]['value']);
	$end_t = strtotime($node->field_date[$language][0]['value2']);
	$days = date_diff($start, $end);
	$days = $days->d;
	
	$first_day = date('Y-m-d 00:00', $start_t);
	$first_location = null;
	$locations = array();
	$times = array();
	
	foreach ($node->field_locations[$language] as $location)
	{
		$locations[] = $location['lid'];
		if (!$first_location)
		{
			$first_location = $location['lid'];
		}
	}
				
	for ($d = 0; $d <= $days; $d++)
	{
		for ($t = 0; $t < 24; $t += 0.5)
		{
			$h = floor($t);
			$m = ($t - $h ? '30' : '00');
			if (strlen($h) < 2)
			{
				$h = '0'.$h;
			}
			$time = $h.':'.$m;
			$now = strtotime(date('Y-m-d '.$time, strtotime($first_day)).' + '.$d.' days');
			if ($now >= $start_t && $now <= $end_t)
			{
				foreach ($locations as $location)
				{
					$schedule[$location][$now] = null;
				}
				$times[] = $now;
			}
		}
	}
	$r = db_query("
			SELECT
				nid
			FROM
				node
			JOIN
				field_data_field_conference AS conference
				ON
					conference.entity_id = node.nid
			WHERE
				type = 'workshop'
				AND
				conference.field_conference_nid = 2
			",
			array('nid' => $nid));
	$workshops = array();
	foreach ($r->fetchAll() as $field)
	{
		$workshop = node_load($field->nid);
		$workshops[$field->nid] = array('node' => $workshop) + $_POST['workshops'][$field->nid];
		for ($i = 0; $i < $_POST['workshops'][$field->nid]['length']; $i++)
		{
			$schedule[$_POST['workshops'][$field->nid]['location']][$_POST['workshops'][$field->nid]['time'] + ($i * 1800)] = $workshop->nid;
		}
	}
	$conflicts = array();
	foreach ($times as $time)
	{
		for ($i = 0; $i < count($locations) - 1; $i++)
		{
			$locationA = $locations[$i];
			for ($j = $i + 1; $j < count($locations); $j++)
			{
				$locationB = $locations[$j];
				if ($schedule[$locationA][$time] && $schedule[$locationB][$time] && ($overlap = _bikebike_coordinator_overlap($workshopA = $workshops[$schedule[$locationA][$time]]['node'], $workshopB = $workshops[$schedule[$locationB][$time]]['node'])))
				{
					$conflicts[$schedule[$locationA][$time]] = array
						(
							'nid' => $schedule[$locationB][$time],
							'uids' => $overlap,
							'messageA' => format_plural(count($overlap), 'Conflict: @a shares a corrdinator with @b', 'Conflict: %a shares @count corrdinators with %b', array('@a' => $workshopA->title, '@b' => $workshopB->title)),
							'messageB' => format_plural(count($overlap), 'Conflict: @a shares a corrdinator with @b', 'Conflict: %a shares @count corrdinators with %b', array('@a' => $workshopB->title, '@b' => $workshopA->title))
						);
				}
			}
		}
	}
	die(json_encode ($conflicts));
}

function bikebike_scheduler_page($form_state, $args)
{
	global $user;
	$node = $args['build_info']['args'][0];
	$nid = $node->nid;//node_load($nid);
	if (!$node || $node->type != 'conference')
	{
		return;
	}

	$saved_fields = _field_field_load_fields($user->uid, $nid);

	$language = $node->language;

	$form['#method'] = 'post';

	$form['nid'] = array
	(
		'#type' => 'value',
		'#value' => $nid
	);
	
	if (!isset($node->field_locations[$language]) || count($node->field_locations[$language]) < 1)
	{
		$form['nolocations'] = array
		(
			'#type' => 'markup',
			'#markup' => t('Before scheduling workshops locations must be added to the conference. You may add locations on your conference <a href="@link">edit</a> page.', array('@link' => '/node/'.$nid.'/edit'))
		);
		$form['edit'] = array(
			'#type' => 'markup',
			'#markup' => t('<a href="@url" class="button">Add Locations...</a>', array('@url' => url('node/'.$nid.'/edit', array('fragment' => 'node_conference_form_group_schedule')))),
		);
		
		$form['cancel'] = array(
			'#type' => 'submit',
			'#value' => t('Cancel'),
			'#submit' => array('bikebike_add_member_cancel'),
			'#limit_validation_errors' => array()
		);
		return $form;
	}

	$form['description'] = array
	(
		'#type' => 'markup',
		'#markup' => '<p>'.($node->field_workshops_published[$language][0]['value'] ?
						t('This schedule is currently published, any changes may negatively effect conference participants. Edit with caution and consider notifying participants after you have finished.') :
						t('This schedule is currenly unpublished, and can only be seen by conference organizers. When you are complete you may publish or save you work and publish it at a later date.')).'</p>'
	);
	
	$form['instructions'] = array
	(
		'#type' => 'markup',
		'#markup' => '<p>'.t('Drag and drop workshops, events, or meals into the calendar to schedule them. Once in the calendar, you may resize the item to set the time span and removing an item simply puts it back into its original, unscheduled location. Once the schedule is published, coordinators of unscheduled workshops will be notified that their workshop has been cancelled, however you may rescheule later. Remember to save often!').'</p>'
	);
	
	$form['schedule'] = array
	(
		'#type' => 'fieldset',
		//'#title' => t('Schedule:'),
		'#tree' => TRUE
	);

	/*$form['schedule']['expand'] = array
	(
		'#type' => 'markup',
		'#markup' => '<div id="edit-screen"></div><a href="javascript:void(0)" class="button" id="expand-schedule">'.t('Expand').'</a><a href="javascript:void(0)" class="button" id="collapse-schedule">'.t('Collapse').'</a>',
	);*/
	
	$start = new DateTime($node->field_date[$language][0]['value']);
	$end = new DateTime($node->field_date[$language][0]['value2']);
	$start_t = strtotime($node->field_date[$language][0]['value']);
	$end_t = strtotime($node->field_date[$language][0]['value2']);
	$day = date('N', $start_t);
	$days = date_diff($start, $end);
	$days = $days->d;
	
	$week = array(t('Sunday'), t('Monday'), t('Tuesday'), t('Wednesday'), t('Thursday'), t('Friday'), t('Saturday'));
	
	drupal_add_js('sites/all/modules/jquery_update/replace/ui/ui/minified/jquery.ui.resizable.min.js');
	
	$first_day = date('Y-m-d 00:00', $start_t);
	
	for ($d = 0; $d <= $days; $d++)
	{
		$form['schedule'][$d] = array
		(
			'#type' => 'fieldset',
			'#title' => $week[($d + $day) % 7],
			'#tree' => TRUE,
			'#collapsible' => TRUE,
			'#collapsed' => FALSE
		);
		$form['schedule'][$d]['expand'] = array
		(
			'#type' => 'markup',
			'#markup' => '<a href="javascript:void(0)" class="button expand-day" id="expand-day-'.$d.'" onclick="expandDay('.$d.')">'.t('See Full Day').'</a><a href="javascript:void(0)" id="collapse-day-'.$d.'" class="button collapse-day" onclick="collapseDay('.$d.')">'.t('See Only Daytime Hours').'</a>',
		);
		$times = '<ul class="times">';
		for ($t = 0; $t < 24; $t += 0.5)
		{
			$h = floor($t);
			$m = ($t - $h ? '30' : '00');
			if (strlen($h) < 2)
			{
				$h = '0'.$h;
			}
			$time = $h.':'.$m;
			$now = strtotime(date('Y-m-d '.$time, strtotime($first_day)).' + '.$d.' days');
			if ($now >= $start_t && $now <= $end_t)
			{
				$times .= '<li class="'.($t < 7 || $t > 19 ? 'unpopular' : 'popular').' l-<lid> d-'.date('Y-m-d', $now).' t-'.$now.' h-'.$h.' m-'.$m.' '.($now >= $start_t && $now <= $end_t ? 'available' : 'unavailable').'"><span class="time">'.$time.'</span><div class="time-slot"></div></li>';
			}
		}
		$times .= '</ul>';
		foreach ($node->field_locations[$language] as $location)
		{
			//_bikebike_show_object($location);
			$form['schedule'][$d][$location['lid']] = array
			(
				'#type' => 'fieldset',
				'#title' => $location['name'],
				'#tree' => TRUE
			);
			$form['schedule'][$d][$location['lid']]['times'] = array
		  	(
		    	'#type' => 'markup',
		    	'#markup' => str_replace('<lid>', $location['lid'], $times),
		  	);
		}
	}

	$r = db_query("
			SELECT
				nid
			FROM
				node
			JOIN
				field_data_field_conference AS conference
				ON
					conference.entity_id = node.nid
			WHERE
				type = 'workshop'
				AND
				conference.field_conference_nid = 2
			",
			array('nid' => $nid));
	
	$workshops = array();
	
	$form['workshops'] = array
	(
		'#type' => 'fieldset',
		'#title' => t('Workshops:'),
		'#tree' => TRUE
	);
	
	foreach ($r->fetchAll() as $field)
	{
		$workshop = node_load($field->nid);
		$workshops[] = $workshop;
		$form['workshops'][$field->nid] = array
		(
			'#type' => 'fieldset',
			'#title' => $workshop->title,
			'#tree' => TRUE,
			'#attributes' => array(
					'class' => array('schedulable', 'workshop'),
					'id' => 'workshop-'.$field->nid
				),
			'#description' => '<a href="javascript:void(0)" class="de-schedule"></a>'
			//'#markup' => '<div class="schedulable" id="schedule-'.$field->nid.'"><h3>'.$workshop->title.'</h3><a href="javascript:void(0)" class="de-schedule"></a></div>',
		);
		$time = isset($workshop->field_scheduled_time[$language]) ? ($workshop->field_scheduled_time[$language][0]['value'] ?: '') : '';
		$time2 = isset($workshop->field_scheduled_time[$language]) ? ($workshop->field_scheduled_time[$language][0]['value2'] ?: '') : '';
		$length = '';
		if ($time)
		{
			$time = strtotime($time);
			$length = (strtotime($time2) - $time) / 1800;
		}
		$form['workshops'][$field->nid]['location'] = array
		(
			'#type' => 'hidden',
			'#default_value' => isset($workshop->field_lid[$language]) ? $workshop->field_lid[$language][0]['value'] : null,
			'#attributes' => array('class' => array('location')),
		);
		$form['workshops'][$field->nid]['time'] = array
		(
			'#type' => 'hidden',
			'#default_value' => $time,
			'#attributes' => array('class' => array('time')),
		);
		$form['workshops'][$field->nid]['length'] = array
		(
			'#type' => 'hidden',
			'#default_value' => $length ?: '1',
			'#attributes' => array('class' => array('length')),
		);
	}
	
	$r = db_query("
			SELECT
				nid
			FROM
				node
			JOIN
				field_data_field_conference AS conference
				ON
					conference.entity_id = node.nid
			WHERE
				type = 'event'
				AND
				conference.field_conference_nid = 2
			",
			array('nid' => $nid));
	
	$events = array();
	
	$form['events'] = array
	(
		'#type' => 'fieldset',
		'#title' => t('Events:'),
		'#tree' => TRUE
	);
	
	$form['events']['meals'] = array
	(
		'#type' => 'fieldset',
		'#tree' => TRUE,
		'#description' => '',
		'#title' => t('Meals'),
	);
	if (isset($node->field_meals_provided[$language]) && $node->field_meals_provided[$language][0]['value'])
	{
		$form['events']['meals']['#description'] = t('Meals will be provided for this conference.').' '.t('You may change this by editing you conference details.');
		$form['events']['meals'][0] = array
		(
			'#type' => 'fieldset',
			'#title' => t('Meal'),
			'#tree' => TRUE,
			'#attributes' => array(
				'class' => array('schedulable', 'meal'),
				'id' => 'meal-0'
			),
			'#description' => '<a href="javascript:void(0)" class="de-schedule"></a>'
		);
		$time = null;//$event->field_scheduled_time[$language][0]['value'] ?: '';
		$time2 = null;//$event->field_scheduled_time[$language][0]['value2'] ?: '';
		$length = null;//'';
		if ($time)
		{
			$time = strtotime($time);
			$length = (strtotime($time2) - $time) / 1800;
		}
		$form['events']['meals'][0]['location'] = array
		(
			'#type' => 'hidden',
			'#default_value' => null,//$event->field_lid[$language][0]['value'],
			'#attributes' => array('class' => array('location')),
		);
		$form['events']['meals'][0]['time'] = array
		(
			'#type' => 'hidden',
			'#default_value' => $time,
			'#attributes' => array('class' => array('time')),
		);
		$form['events']['meals'][0]['length'] = array
		(
			'#type' => 'hidden',
			'#default_value' => $length ?: '1',
			'#attributes' => array('class' => array('length')),
		);
		$index = 1;
		foreach ((isset($node->field_scheduled_times[$language]) ? $node->field_scheduled_times[$language] : array()) as $meal)
		{
			//_bikebike_show_object($meal['value']);
			$meal = field_collection_item_load($meal['value'], $reset = FALSE);
			$time = $meal->field_scheduled_time[$language][0]['value'] ?: '';
			$time2 = $meal->field_scheduled_time[$language][0]['value2'] ?: '';
			$length = '';
			if ($time)
			{
				$time = strtotime($time);
				$length = (strtotime($time2) - $time) / 1800;
			}
			$form['events']['meals'][$index] = array
			(
				'#type' => 'fieldset',
				'#title' => t('Meal'),
				'#tree' => TRUE,
				'#attributes' => array(
					'class' => array('schedulable', 'meal'),
					'id' => 'meal-'.$index
				),
				'#description' => '<a href="javascript:void(0)" class="de-schedule"></a>'
			);
			$form['events']['meals'][$index]['location'] = array
			(
				'#type' => 'hidden',
				'#default_value' => $meal->field_lid[$language][0]['value'],
				'#attributes' => array('class' => array('location')),
			);
			$form['events']['meals'][$index]['time'] = array
			(
				'#type' => 'hidden',
				'#default_value' => $time,
				'#attributes' => array('class' => array('time')),
			);
			$form['events']['meals'][$index]['length'] = array
			(
				'#type' => 'hidden',
				'#default_value' => $length ?: '1',
				'#attributes' => array('class' => array('length')),
			);
			$index++;
		}
	}
	else
	{
		$form['events']['meals']['#description'] = t('Meals will not be provided for this conference.').' '.t('You may change this by editing you conference details.');
	}

	foreach ($r->fetchAll() as $field)
	{
		$event = node_load($field->nid);
		$events[] = $event;
		$form['events'][$field->nid] = array
		(
				'#type' => 'fieldset',
				'#title' => $event->title,
				'#tree' => TRUE,
				'#attributes' => array(
						'class' => array('schedulable', 'event'),
						'id' => 'event-'.$field->nid
				),
				'#description' => '<a href="javascript:void(0)" class="de-schedule"></a>'
		);
		$time = isset($event->field_scheduled_time[$language]) ? ($event->field_scheduled_time[$language][0]['value'] ?: '') : '';
		$time2 = isset($event->field_scheduled_time[$language]) ? ($event->field_scheduled_time[$language][0]['value2'] ?: '') : '';
		$length = '';
		if ($time)
		{
			$time = strtotime($time);
			$length = (strtotime($time2) - $time) / 1800;
		}
		$form['events'][$field->nid]['location'] = array
		(
				'#type' => 'hidden',
				'#default_value' => isset($event->field_lid[$language]) ? $event->field_lid[$language][0]['value'] : null,
				'#attributes' => array('class' => array('location')),
		);
		$form['events'][$field->nid]['time'] = array
		(
				'#type' => 'hidden',
				'#default_value' => $time,
				'#attributes' => array('class' => array('time')),
		);
		$form['events'][$field->nid]['length'] = array
		(
				'#type' => 'hidden',
				'#default_value' => $length ?: '1',
				'#attributes' => array('class' => array('length')),
		);
	}
	$form['events']['add'] = array(
		'#type' => 'markup',
		'#markup' => t('<a href="@url" class="button">Add An Event...</a>', array('@url' => url('node/add/event/'.$nid))),
	);

	$form['save'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
		'#submit' => array('bikebike_scheduler_page_save')
	);

	$form['publish'] = array(
		'#type' => 'submit',
		'#value' => $node->field_workshops_published[$language][0]['value'] ? t('Unpublish') : t('Publish'),
		'#submit' => array('bikebike_scheduler_page_save'),
		'#attributes' => array('publish' => !($node->field_workshops_published[$language][0]['value']))
	);
	
	$form['cancel'] = array(
		'#type' => 'submit',
		'#value' => t('Cancel'),
		'#submit' => array('bikebike_add_member_cancel'),
		'#limit_validation_errors' => array()
	);
	return $form;
}

function bikebike_scheduler_page_save($form, &$form_state)
{
	global $user;
	$nid = $form['nid']['#value'];
	$node = node_load($nid);
	if (!$node || $node->type != 'conference')
	{
		return;
	}
	
	//_bikebike_show_object($form_state);//['publish']['#attributes']);
	//return;
	
	$saved_fields = _field_field_load_fields($user->uid, $nid);
	
	$language = $node->language;
	
	$r = db_query("
			SELECT
				nid
			FROM
				node
			JOIN
				field_data_field_conference AS conference
				ON
					conference.entity_id = node.nid
			WHERE
				(
					type = 'workshop'
					OR
					type = 'event'
				)
				AND
				conference.field_conference_nid = 2
			",
			array('nid' => $nid));
	
	foreach ($r->fetchAll() as $field)
	{
		$workshop = node_load($field->nid);
		$type = $workshop->type.'s';
		$workshop->field_lid[$language][0]['value'] = $form[$type][$field->nid]['location']['#value'] ?: null;
		$time = $form[$type][$field->nid]['time']['#value'] ?: null;
		$length = $form[$type][$field->nid]['length']['#value'] ?: null;
		$workshop->field_scheduled_time[$language][0]['value'] = $time ? date('Y-m-d H:i:s', $time) : null;
		$time2 = $time ? date('Y-m-d H:i:s', strtotime(date('Y-m-d H:i', $time).' + '.($length * 30).' minutes')) : null;
		$workshop->field_scheduled_time[$language][0]['value2'] = $time2;
		node_save($workshop);
	}
	
	if (!(isset($node->field_scheduled_times[$language])))
	{
		$node->field_scheduled_times[$language] = array();
	}
	$fields = array();
	foreach ($node->field_scheduled_times[$language] as $field)
	{
		$fields[] = $field['value'];
	}
	entity_delete_multiple('field_collection_item', $fields);

	$node->field_scheduled_times[$language] = NULL;
	node_save($node);

	$scheduled_time = array();
	foreach ($_POST['events']['meals'] as $key => $value)
	{
		if (is_numeric($key) && $key > 0)
		{
			$scheduled_time = entity_create('field_collection_item', array('field_name' => 'field_scheduled_times'));
			$scheduled_time->setHostEntity('node', $node);
			$scheduled_time->field_lid[$language][0]['value'] = $value['location'] ?: null;
			$time = $value['time'] ?: null;
			$length = $value['length'] ?: null;
			$scheduled_time->field_scheduled_time[$language][0]['value'] = $time ? date('Y-m-d H:i:s', $time) : null;
			$time2 = $time ? date('Y-m-d H:i:s', strtotime(date('Y-m-d H:i', $time).' + '.($length * 30).' minutes')) : null;
			$scheduled_time->field_scheduled_time[$language][0]['value2'] = $time2;
			$scheduled_time->save();
		}
	}
	
	$published = null;
	
	if ($form_state['values']['op'] == t('Publish'))
	{
		$node->field_workshops_published[$language][0]['value'] = 1;
		$published = 1;
	}
	else if ($form_state['values']['op'] == t('Unublish'))
	{
		$node->field_workshops_published[$language][0]['value'] = 0;
		$published = 0;
	}
	
	drupal_set_message(t('Schedule was %saved at %time.', array('%saved' => t('saved').($published === 1 ? t(' and published') : ($published === 0 ? t(' and unpublished') : '')), '%time' => date('h:i:s A'))));
	
	node_save($node);
}

function bikebike_registration_page($form_state, $args)
{
	global $user;
	$node = $args['build_info']['args'][0];
	$nid = $node->nid;// = node_load($nid);
	if (!$node || $node->type != 'conference')
	{
		return;
	}
	
	$saved_fields = _field_field_load_fields($user->uid, $nid);
	
	$language = $node->language;
	
	$form[0] = array
	(
		'#title' => t('Attending:'),
		'#type' => 'select',
		'#required' => 1,
		//'#description' => t($field->body[$language][0]['value']),
		'#options' => array('yes' => 'Yes', 'no' => 'No', 'maybe' => 'Not sure'),
		'#default_value' => isset($saved_fields[0]) ? $saved_fields[0]->data : 'yes'
	);
	$date = new DateTime();
	$form[-1] = array
	(
		'#type' => 'value',
		'#value' => isset($saved_fields[0]) ? $saved_fields[-1]->data : $date->getTimestamp()
	);
	
	if (isset($node->field_fields[$language]))
	{
		$form['details'] = array
		(
			'#type' => 'fieldset',
			//'#title' => t('Invitations:'),
			'#tree' => TRUE
		);
	}
	
	foreach ((isset($node->field_fields[$language]) ? $node->field_fields[$language] : array()) as $field_id)
	{
		//_bikebike_show_object($field_id);
		$field = node_load($field_id['target_id']);
		$type = $field->field_field_type[$language][0]['value'];
		$form['details'][$field_id['target_id']] = array
			(
				'#title' => t($field->title),
				'#type' => $type == 'date' ? 'date_popup' : $type,
				'#required' => $field->field_required[$language][0]['value']
			);
		if (isset($field->body[$language]))
		{
			$form['details'][$field_id['target_id']]['#description'] = t($field->body[$language][0]['value']);
		}
		$form['field_versions'][$field_id['target_id']] = array
		(
			'#type' => 'value',
			'#value' => $field->vid
		);
		//_bikebike_show_object($field->nid);
		if (isset($saved_fields[$field_id['target_id']]))
		{
			$form['details'][$field_id['target_id']]['#default_value'] = $saved_fields[$field_id['target_id']]->data;
			//_bikebike_show_object($saved_fields[$field_id['target_id']]);
		}
		if ($type == 'select' || $type == 'checkboxes')
		{
			$options = array();
			$keyvalue = preg_split('/\r\n|\n|\r/', $field->field_options[$language][0]['value']);
			foreach ($keyvalue as $kv)
			{
				$split = preg_split('/\|/', $kv);
				if (count($split) > 1)
				{
					$options[$split[0]] = $split[1];
				}
				else
				{
					$options[$split[0]] = $split[0];
				}
				//if (is_array(!array_search($split[0], ))
			}
			$form['details'][$field_id['target_id']]['#options'] = $options;
			if ($field->field_include_other_option[$language][0]['value'])
			{
				$form['details'][$field_id['target_id']]['#select_type'] = $form['details'][$field_id['target_id']]['#type'];
				$form['details'][$field_id['target_id']]['#type'] = 'select_or_other';
				$form['details'][$field_id['target_id']]['#other_unknown_defaults'] = 'other';
				//$form['details'][$field_id['target_id']]['#default_value'] = $saved_fields[$field_id['target_id']]->data;
				$form['details'][$field_id['target_id']]['#other_delimiter'] = ', ';
			}
			else if (isset($form['details'][$field_id['target_id']]['#default_value']))
			{
				$defaults = $form['details'][$field_id['target_id']]['#default_value'];
				//_bikebike_show_object($form['details'][$field_id['target_id']]['#default_value']);
				//$known_defaults = array();
				$unknown_defaults = array();
				if ($defaults)
				{
					foreach ((is_array($defaults) ? $defaults : array($defaults)) as $value)
					{
						//_bikebike_show_object($value);
						if (!isset($options[$value]))
						{
							$unknown_defaults[] = $value;
						}
					}
				}
				$form['details'][$field_id['target_id']]['#options'] = array_merge($form['details'][$field_id['target_id']]['#options'], $unknown_defaults);
			}
			/*else if ($defaults)
			{
				$form['details'][$field_id['target_id']]['#default_value'] = $defaults;
			}*/
		}
		//_bikebike_show_object($saved_fields[$field_id['target_id']]);
	}
	//_bikebike_show_object($saved_fields);
	
	//$form['details'][40]['#default_value'] = array('bed', 'floor');
	
	$form['save'] = array(
		'#type' => 'submit',
		'#value' => t('Save'),
		'#submit' => array('bikebike_registration_page_save')
		//'#limit_validation_errors' => array()
	);
	
	$form['cancel'] = array(
		'#type' => 'submit',
		'#value' => t('Cancel'),
		'#submit' => array('bikebike_add_member_cancel'),
		'#limit_validation_errors' => array()
	);
	
	$form['uid'] = array
	(
		'#type' => 'value',
		'#value' => $user->uid
	);
	$form['nid'] = array
	(
		'#type' => 'value',
		'#value' => $nid
	);
	//_bikebike_show_object($node);
	$form['#method'] = 'post';
  	$form['#redirect'] = 'node/'.$nid;
  	
	return $form;
}

function bikebike_registration_page_save($form, &$form_state)
{
	//_bikebike_show_object($form);
	//$values = $form;
	$details = isset($form['details']) ? $form['details'] : array();
	$values = ($form ?: array()) + $details;
	unset($values['details']);

	$fields = array();
	$nid = $values['nid']['#value'];
	$uid = $values['uid']['#value'];
	
	foreach ($values as $field_nid => $value)
	{
		if (is_numeric($field_nid))
		{
			if (isset($value['#select_type']) && $value['#select_type'] == 'checkboxes')
			{
				foreach ($value['select']['#options'] as $option => $val)
				{
					$v = $value['select'][$option]['#value'];
					if ($option == 'select_or_other')
					{
						$v = $value['other']['#value'];
					}
					if ($v)
					{
						$fields[] = array
						(
							'nid' => $nid,
							'uid' => $uid,
							'field_nid' => $field_nid,
							'field_vid' => isset($form['field_versions'][$field_nid]) ? $form['field_versions'][$field_nid]['#value'] : 0,
							'data' => $v
						);
					}
				}
			}
			else
			{
				if (isset($value['#select_type']) && $value['#select_type'] == 'select')
				{
					//_bikebike_show_object($value);
					$val = $value['select']['#value'];
					if ($val == 'select_or_other')
					{
						$val = $value['other']['#value'];
					}
				}
				else
				{
					$val = $value['#value'];
				}
				if (is_array($val))
				{
					if (isset($val['date']))
					{
						$val = $val['date'].' '.$val['time'];
					}
				}
				$fields[] = array
				(
					'nid' => $nid,
					'uid' => $uid,
					'field_nid' => $field_nid,
					'field_vid' => isset($form['field_versions'][$field_nid]) ? $form['field_versions'][$field_nid]['#value'] : 0,
					'data' => $val
				);
				//_bikebike_show_object($value['#value']);
			}
		}
	}
	_field_field_save_fields($uid, $nid, $fields);
	drupal_set_message(t('Your registration has been submitted.'));
	drupal_goto('node/'.$nid);
}

function _bikebike_get_registation($uid, $nid)
{
	return _field_field_load_fields($uid, $nid);
}

function bikebike_invitations_page($form_state, $args)
{
	$node = $args['build_info']['args'][1];
	//$node = node_load($nid);
	$nid = $node->nid;
	$type = $args['build_info']['args'][0];
	if (!$node || $node->type != $type)
	{
		return;
	}
	
	$language = $node->language;
	
	$field = $node->type == 'organization' ? 'field_administrators' : 'field_coordinators';
	
	$member_uids = array();
	$members = array();
	foreach ((isset($node->{$field}['und']) ? $node->{$field}['und'] : array()) as $admin)
	{
		$member = user_load($admin['target_id']);
		$members[] = $member;
		$member_uids[] = $member->uid;
		$member_emails[] = $member->mail;
	}
	
	$r = db_query("
			SELECT
				node.nid,
				email.field_email_address_email,
				users.uid
			FROM
				node
			JOIN
				field_data_field_node AS n
				ON
					n.entity_id = node.nid
			JOIN
				field_data_field_invitation AS invite
				ON
					invite.entity_id = node.nid
			JOIN
				field_data_field_state AS state
				ON
					state.entity_id = node.nid
			JOIN
				field_data_field_email_address AS email
				ON
					email.entity_id = node.nid
			LEFT OUTER JOIN
				users
				ON
					users.mail = email.field_email_address_email
			WHERE
				type = 'request'
				AND
				n.field_node_nid = :nid
				AND
				invite.field_invitation_value = 1
				AND
				state.field_state_value = 0
			",
			array('nid' => $nid));
	
	$cantinvite = "'".implode("', '", $member_emails)."'";
	
	if ($r->rowCount() > 0)
	{
		$form['invitations'] = array
		(
			'#type' => 'fieldset',
			'#title' => t('Invitations:'),
			'#tree' => TRUE
		);
		
		$checkboxes = array();
		
		foreach ($r as $result)
		{
			$cantinvite .= ", '".$result->field_email_address_email."'";
			$request = node_load($result->nid);
			$checkboxes[$result->nid] = $result->uid ? drupal_render(user_view(user_load($result->uid), 'entityreference_view_widget')) : $result->field_email_address_email;
		}
		
		$form['invitations']['members'] = array
		(
			'#type' => 'checkboxes',
			'#options' => $checkboxes,
			'#tree' => TRUE
		);
		
		$form['invitations']['cancelinvitations'] = array
		(
			'#type' => 'submit',
			'#value' => t('Cancel Selected Invitations'),
			'#submit' => array('bikebike_invitaions_page_cancelinvitations'),
			'#limit_validation_errors' => array()
		);
	}
	
	$form['emailinvite'] = array
	(
		'#type' => 'fieldset',
		'#title' => t('Invite by Email:'),
		'#tree' => TRUE
	);
	
	$form['emailinvite']['message'] = array
	(
		'#title' => t('Message:'),
		'#type' => 'textarea',
		'#description' => t('You may include a message in the request.'),
		'#default_value' => ''
	);
	$form['emailinvite']['emails'] = array
	(
		'#title' => t('Invite by Email:'),
		'#type' => 'textarea',
		'#description' => t('Invite users using their email, once the user registers they will be be given permission to join this '.$type.'. Multiple users may be invited by entering email addresses on seperate lines.'),
		'#default_value' => '',
		'#required' => TRUE,
	);
	$form['emailinvite']['emailinvite'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
		'#submit' => array('bikebike_invitaions_page_emailinvite'),
		'#limit_validation_errors' => array()
	);
	
	$r = db_query("
			SELECT
				email.field_email_address_email,
				node.nid
			FROM
				{node}
			JOIN
				{field_data_field_node} AS n
				ON
					n.entity_id = node.nid
			JOIN
				{field_data_field_invitation} AS invite
				ON
					invite.entity_id = node.nid
			JOIN
				{field_data_field_state} AS state
				ON
					state.entity_id = node.nid
			JOIN
				field_data_field_email_address AS email
				ON
					email.entity_id = node.nid
			WHERE
				type = 'request'
				AND
				n.field_node_nid = :nid
				AND
				invite.field_invitation_value = 0
				AND
				state.field_state_value = 0
			",
			array('nid' => $nid));
	
	foreach ($r as $result)
	{
		$cantinvite .= ", '".$result->field_email_address_email."'";
	}
	
	$r = db_query('SELECT uid FROM users WHERE users.mail NOT IN('.$cantinvite.') AND users.uid > 0 ORDER BY users.name');
	$checkboxes = array();
	foreach ($r as $result)
	{
		$checkboxes[$result->uid] = drupal_render(user_view(user_load($result->uid), 'entityreference_view_widget'));
	}
	$form['invitemore'] = array
	(
		'#type' => 'fieldset',
		'#title' => t('Invite Other Members:'),
		'#tree' => TRUE
	);
	$form['invitemore']['message'] = array
	(
		'#title' => t('Message:'),
		'#type' => 'textarea',
		'#description' => t('You may include a message in the request.'),
		'#default_value' => ''
	);
	$form['invitemore']['filter'] = array
	(
		'#type' => 'textfield',
		'#title' => 'Filter Users By Name:'
	);
	$form['invitemore']['members'] = array
	(
		'#type' => 'checkboxes',
		'#options' => $checkboxes,
		'#tree' => TRUE
	);
	$form['invitemore']['invitemore'] = array(
		'#type' => 'submit',
		'#value' => t('Invite Selected Members'),
		'#submit' => array('bikebike_invitaions_page_invitemore'),
		'#limit_validation_errors' => array()
	);
	
	$form['done'] = array(
		'#type' => 'submit',
		'#value' => t('Done'),
		'#submit' => array('bikebike_add_member_cancel'),
		'#limit_validation_errors' => array()
	);
	
	$form['nid'] = array
	(
		'#type' => 'value',
		'#value' => $nid
	);
	$form['#method'] = 'post';
  	$form['#redirect'] = 'node/'.$nid;
	return $form;
}

function bikebike_invitaions_page_cancelinvitations($form, &$form_state)
{
	$invitations = $form['invitations']['members']['#value'];
	if (count($invitations) < 1)
	{
		drupal_set_message('Please select at least 1 request', 'error');
		return;
	}
	foreach ($invitations as $invitation)
	{
		node_delete($invitation);
	}
	//$nid = $form['nid']['#value'];
	//$node = node_load($nid);
	if (count($invitations) > 1)
	{
		drupal_set_message(count($invitations).' invitations have been cancelled.');
	}
	else
	{
		drupal_set_message('1 invitation has been cancelled.');
	}
}

function bikebike_invitaions_page_invitemore($form, &$form_state)
{
	$members = $form['invitemore']['members']['#value'];
	if (count($members) < 1)
	{
		drupal_set_message('You must select at least 1 member', 'error');
		return;
	}
	$nid = $form['nid']['#value'];
	$node = node_load($nid);
	//drupal_set_message(_bikebike_show_object($form['invitemore']['members']['#value']));
	foreach ($members as $uid)
	{
		$member = user_load($uid);
		bikebike_create_request($node, $form['invitemore']['message']['#value'], $member->mail, true);
	}
	if (count($members) > 1)
	{
		drupal_set_message(count($members).' invitations have been sent.');
	}
	else
	{
		drupal_set_message('An invitation has been sent to '.$member->name.'.');
	}
}

function bikebike_invitaions_page_emailinvite($form, &$form_state)
{
	$emails = preg_split('/\r\n|\n|\r/', $form['emailinvite']['emails']['#value']);
	if (count($emails) < 1)
	{
		drupal_set_message('At least 1 email is required', 'error');
		return;
	}
	$nid = $form['nid']['#value'];
	$node = node_load($nid);
	//drupal_set_message(_bikebike_show_object($form['invitemore']['members']['#value']));
	foreach ($emails as $email)
	{
		bikebike_create_request($node, null, trim($email), true);
	}
	if (count($emails) > 1)
	{
		drupal_set_message(count($emails).' invitations have been sent.');
	}
	else
	{
		drupal_set_message('An invitation has been sent to '.$emails[0].'.');
	}
}

function bikebike_add_member($form_state, $args)
{
	$node = $args['build_info']['args'][0];
	//$node = node_load($nid);
	$nid = $node->nid;
	$type = $args['build_info']['args'][2];
	if (!$node || $node->type != $type)
	{
		drupal_set_message('Unknown '.$args['build_info']['args'][2]);
		drupal_goto($args['build_info']['args'][2].'s');
		return;
	}
	
	$language = $node->language;
	
	if ($args['build_info']['args'][1] === true)
	{
		$form['remove'] = array
		(
			'#type' => 'fieldset',
			'#title' => t('Are you sure you want to be removed as a member of '.$node->title.'?'),
			'#tree' => TRUE
		);
		$form['remove']['remove'] = array(
			'#type' => 'submit',
			'#value' => t('Yes'),
			'#submit' => array('bikebike_add_member_remove'),
			'#limit_validation_errors' => array()
		);
		$form['actions']['cancel'] = array(
			'#type' => 'submit',
			'#value' => t('Cancel'),
			'#submit' => array('bikebike_add_member_cancel'),
			'#limit_validation_errors' => array()
		);
	}
	else
	{
		$show_secret = false;
		
		if ($type == 'organization')
		{
			$secret_id = (isset($node->field_organization_secret[$language]) && $node->field_organization_secret[$language][0]['value'] ? $node->field_organization_secret[$language][0]['value'] : null);
			$secret = $secret_id ? field_collection_item_load($secret_id, $reset = FALSE) : null;
			$show_secret = ($secret && isset($secret->field_question[$language]) && $secret->field_question[$language][0]['value'] && isset($secret->field_reply[$language]) && $secret->field_reply[$language][0]['password_field']);
		}
		
		if ($show_secret)
		{
			$form['secret'] = array
			(
				'#type' => 'fieldset',
				'#title' => t('Complete This Organization\'s Secret'),
				'#tree' => TRUE
			);
		  	$form['secret']['secret_p'] = array
		  	(
		    	'#type' => 'markup',
		    	'#markup' => '<p>You may automatically add yourself as a member of this organization by completing the following secret.</p>',
		  	);
			$form['secret']['answer'] = array
			(
		    	'#type' => 'textfield',
		    	'#title' => t($secret->field_question[$language][0]['value']),
		    	'#size' => 80,
		    	'#required' => TRUE,
		  	);
		  	$form['secret']['submit'] = array
		  	(
		    	'#type' => 'submit',
		    	'#value' => t('Submit'),
		  	);
		  	/*$form['request']['request_p'] = array
		  	(
		    	'#type' => 'markup',
		    	'#markup' => '<p>Alternatively, you may make a request to any of the current organizaion members. Once your request is seen, any member of the organization can accept or deny your request.</p>',
		  	);*/
		}
		$form['request'] = array
		(
			'#type' => 'fieldset',
			'#title' => t('Request Current Members to Add You'),
			'#tree' => TRUE
		);
		$form['request']['request_p'] = array
		(
			'#type' => 'markup',
			'#markup' => ($type == 'workshop' ? '<p>You may request the current coordinators to add you, any of the current coordinators may accept or deny your request.</p>' : '<p>'.($show_secret ? 'Alternatively, y' : 'Y').'ou may make a request to any of the current organizaion members. Once your request is seen, any member of the organization can accept or deny your request.</p>'),
		);
		$form['request']['message'] = array(
			'#title' => t('Message'),
			'#type' => 'textarea',
			'#description' => t('Adding a message is optional but may help to confirm who you are or what your intent is.'),
			'#default_value' => '',
		);
		$form['request']['request'] = array(
			'#type' => 'submit',
			'#value' => t('Make a Request'),
			'#submit' => array('bikebike_add_member_request'),
			'#limit_validation_errors' => array()
		);
		$form['actions']['cancel'] = array(
			'#type' => 'submit',
			'#value' => t('Cancel'),
			'#submit' => array('bikebike_add_member_cancel'),
			'#limit_validation_errors' => array()
		);	
	}
	
	$form['nid'] = array
	(
		'#type' => 'value',
		'#value' => $nid
	);
	$form['#method'] = 'post';
  	$form['#redirect'] = 'node/'.$nid;
	return $form;
}

function bikebike_add_member_validate(&$form, &$form_state)
{
	//return true;
}

function bikebike_add_member_submit($form, &$form_state)
{
	$nid = $form['nid']['#value'];
	$node = node_load($nid);

	$language = $node->language;
	$secret_id = $node->field_organization_secret[$language][0]['value'];
	$secret = field_collection_item_load($secret_id, $reset = FALSE);
	$answer = $form['secret']['answer']['#value'];
	$real_answer = password_field_decrypt($secret->field_reply[$language][0]['password_field']);
	if (strcasecmp($real_answer, $answer) === 0)
	{
		global $user;
		$already_admin = false;
		$field = $node->type == 'organization' ? 'field_administrators' : 'field_coordinators';
		foreach ((isset($node->{$field}['und']) ? $node->{$field}['und'] : array()) as $admin)
		{
			if ($admin['target_id'] == $user->uid)
			{
				$alreadyadmin = true;
			}
		}
		if (!$already_admin)
		{
			$node->{$field}['und'][] = array('target_id' => $user->uid);
			node_save($node);
			drupal_set_message('You have been successfully registered as an member of '.$node->title);
			//drupal_set_message(print_r($org->field_administrators['und'], true));
		}
	}
	else
	{
		drupal_set_message('Sorry, the answer provided was not correct');
	}
	// Redirect the user to http://example.com/test/<Postcode> upon submit
	$form_state['redirect'] = 'node/'.$nid;
}

function bikebike_add_member_remove($form, &$form_state)
{
	$nid = $form['nid']['#value'];
	$node = node_load($nid);

	$language = $node->language;
	global $user;
	$key = null;
	$field = $node->type == 'organization' ? 'field_administrators' : 'field_coordinators';
	foreach ((isset($node->{$field}['und']) ? $node->{$field}['und'] : array()) as $k => $admin)
	{
		if ($admin['target_id'] == $user->uid)
		{
			$key = $k;
		}
	}
	if ($key)
	{
		if (count($node->{$field}['und']) > 1)
		{
			unset($node->{$field}['und'][$key]);
			node_save($node);
			drupal_set_message('You have been successfully removed as a member of '.$node->title);
		}
		else
		{
			drupal_set_message('Could not remove you as a member of '.$node->title.'; there must be a minimum of one member at all times.', 'error');
		}
	}
	$form_state['redirect'] = 'node/'.$nid;
}

function bikebike_create_request($node, $message, $email = null, $is_invite = false)
{
	global $user;
	$request = new stdClass();
	$request->type = 'request';
	$request->uid = $user->uid;
	$request->body['und'][0]['value'] = $message;
	//drupal_set_message($user->language);
	$request->language = 'und';
	$request->field_node['und'][0]['nid'] = is_object($node) ? $node->nid : $node;
	$request->field_email_address['und'][0]['email'] = $email ?: $user->mail;
	$request->field_invitation['und'][0]['value'] = $is_invite ? 1 : 0;
	$request->field_state['und'][0]['value'] = 0;
	node_object_prepare($request);
	node_save($request);
}

function bikebike_request_query($node, $user)
{
	$nid = is_object($node) ? $node->nid : $node;
	$email = is_object($user) ? $user->mail : $user;
	
	$params = array('nid' => $nid, 'email' => $email);
	if (!$email)
	{
		unset($params['email']);
	}
	
	$r = db_query("
			SELECT
				node.nid
			FROM
				{node}
			JOIN
				{field_data_field_node} AS n
				ON
					n.entity_id = nid
			JOIN
				{field_data_field_email_address} AS email
				ON
					email.entity_id = nid
			JOIN
				{field_data_field_state} AS state
				ON
					state.entity_id = nid
			JOIN
				field_data_field_invitation AS invitation
				ON
					invitation.entity_id = nid
			WHERE
				type = 'request'
				AND
				invitation.field_invitation_value = 0
				AND
				n.field_node_nid = :nid" . ($email ? "
				AND
				email.field_email_address_email = :email" : "") . "
				AND
				state.field_state_value = 0" . ($email ? "
			LIMIT
				1" : ""),
			$params);
	return $r;
}

function _bikebike_request_count($node)
{
	return bikebike_request_query($node, null)->rowCount();
}

function bikebike_create_request_exists($node, $user)
{
	return bikebike_request_query($node, $user)->rowCount() > 0;
}

function bikebike_cancel_request($node)
{
	global $user;
	$r = bikebike_request_query($node, $user);
	if ($r->rowCount() > 0)
	{
		node_delete($r->fetchField());
		drupal_set_message('Your request has been cancelled.');
	}
	drupal_goto('node/'.(is_object($node) ? $node->nid : $node));
}

function bikebike_add_member_cancel($form, &$form_state)
{
	$nid = $form['nid']['#value'];
	$form_state['redirect'] = 'node/'.$nid;
}

function bikebike_add_member_request($form, &$form_state)
{
	drupal_set_message('Your request has been sent.');
	$nid = $form['nid']['#value'];
	bikebike_create_request($nid, $form['request']['message']['#value']);
	$form_state['redirect'] = 'node/'.$nid;
}

function bikebike_autocomplete_callback($type, $field_name, $entity_type, $bundle_name, $entity_id = '', $string = '')
{
	$field = field_info_field($field_name);
	$instance = field_info_instance($entity_type, $field_name, $bundle_name);

	return bikebike_autocomplete_callback_get_matches($type, $field, $instance, $entity_type, $entity_id, $string);
}

function bikebike_autocomplete_callback_get_matches($type, $field, $instance, $entity_type, $entity_id = '', $string = '')
{
	$matches = array();

	$entity = NULL;
	if ($entity_id !== 'NULL')
	{
		$entity = entity_load_single($entity_type, $entity_id);
		if (!$entity || !entity_access('view', $entity_type, $entity))
		{
			return MENU_ACCESS_DENIED;
		}
	}
	
	$handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);
	$thumb = '';

	if ($type == 'tags')
	{
		// The user enters a comma-separated list of tags. We only autocomplete the last tag.
		$tags_typed = drupal_explode_tags($string);
		$tag_last = drupal_strtolower(array_pop($tags_typed));
		if (!empty($tag_last))
		{
			$prefix = count($tags_typed) ? implode(', ', $tags_typed) . ', ' : '';
		}
	}
	else
	{
		// The user enters a single tag.
		$prefix = '';
		$tag_last = $string;
	}

	if (isset($tag_last))
	{
		// Get an array of matching entities.
		$entity_labels = $handler->getReferencableEntities($tag_last, $instance['widget']['settings']['match_operator'], 10);

		// Loop through the products and convert them into autocomplete output.
		foreach ($entity_labels as $values) {
			foreach ($values as $entity_id => $label) {
				$target_type = $field['settings']['target_type'];
				if ($target_type == 'user')
				{
					$user = user_load($entity_id);
					$thumb = theme('image_style', array('style_name' => 'icon_small', 'path' => ($user->picture ? $user->picture->uri : variable_get('user_picture_default', '')), 'attributes' => array('class' => 'avatar')));
				}
				else// ($target_type == 'organization')
				{
					$node = node_load($entity_id);
					if ($node->type == 'organization')
					{
						$thumb = theme('image_style', array('style_name' => 'icon_small', 'path' => ($node->field_icon ? $node->field_icon['und'][0]['uri'] : variable_get('user_picture_default', '')), 'attributes' => array('class' => 'avatar')));
					}
				}
				
				$key = "$label ($entity_id)";
				// Strip things like starting/trailing white spaces, line breaks and tags.
				$key = preg_replace('/\s\s+/', ' ', str_replace("\n", '', trim(decode_entities(strip_tags($key)))));
				// Names containing commas or quotes must be wrapped in quotes.
				if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
					$key = '"' . str_replace('"', '""', $key) . '"';
				}
				//$matches[$prefix . $key] = '<div class="reference-autocomplete">'.$thumb.'<script>console.log(\''.print_r(json_encode($field['settings']['target_type']), true).'\');</script>'.$label.'</div>';
				$matches[$prefix . $key] = '<div class="reference-autocomplete">'.$thumb.$label.'</div>';
			}
		}
	}

	drupal_json_output($matches);
}

function bikebike_form_alter(&$form, $form_state, $form_id)
{
	if ($form_id == 'user_profile_form')
	{
		global $user;
		
		if (fboauth_fbid_load($user->uid))
		{
			unset($form['account']['pass']);
			unset($form['account']['current_pass']);
		}
	}
	else if ($form_id == 'organization_node_form')
	{
		global $user;
		if (empty($form['field_administrators'][$form['field_administrators']['#language']]['#default_value']))
		{
			$form['field_administrators'][$form['field_administrators']['#language']]['#default_value'] = array($user->uid);
		}
		/*$markup = '<div class="field-type-custom field-name-field-administrators-form form-wrapper" id="edit-field-administrators"><label>Members:</label><ul>';
		foreach ($form['field_administrators'][$form['field_administrators']['#language']]['#default_value'] as $uid)
		{
			$u = user_load($uid);
			$markup .= '<li>'.drupal_render(user_view($u, 'entityreference_view_widget')).'</li>';
		}
		$markup .= '</ul></div>';
		$form['field_administrators_view'] = array($form['field_administrators']['#language'] => array('#markup' => $markup), '#weight' => $form['field_administrators']['#weight']);//*/
		if (!in_array('administrator', array_values($user->roles)))
		{
			$form['field_administrators']['#access'] = FALSE;
		}
	}
	else if ($form_id == 'conference_node_form')
	{
		global $user;
		if (!in_array('administrator', array_values($user->roles)))
		{
			$host = isset($form['field_host_organizations']['und']) ? $form['field_host_organizations']['und'][0]['target_id']['#entity']->field_host_organizations['und'][0]['target_id'] : null;
			if ($host)
			{
				$host = node_load($host);
			}
			$form['field_workshops_published']['#access'] = FALSE;

			$form['field_locations']['#access'] = FALSE;
			$form['field_meals_provided']['#access'] = FALSE;
			$form['field_meal_info']['#access'] = FALSE;
			$form['field_registration_open']['#access'] = FALSE;
			$form['field_fields']['#access'] = FALSE;
		}
	}
	else if ($form_id == 'workshop_node_form')
	{
		global $user;
		if (!in_array('administrator', array_values($user->roles)))
		{
			if (empty($form['field_coordinators'][$form['field_coordinators']['#language']]['#default_value']))
			{
				$form['field_coordinators'][$form['field_coordinators']['#language']]['#default_value'] = array($user->uid);
			}
			$markup = '<div class="field-type-custom field-name-field-coordinators-form form-wrapper" id="edit-field-coordinators"><label>Coordinators:</label><ul>';
			foreach ($form['field_coordinators'][$form['field_coordinators']['#language']]['#default_value'] as $uid)
			{
				$u = user_load($uid);
				$markup .= '<li>'.drupal_render(user_view($u, 'entityreference_view_widget')).'</li>';
			}
			$markup .= '</ul></div>';
			$form['field_coordinators_view'] = array($form['field_coordinators']['#language'] => array('#markup' => $markup), '#weight' => $form['field_coordinators']['#weight']);
			$form['field_coordinators']['#access'] = FALSE;
		}
	}
	else if ($form_id == 'bikebike_add_member')
	{
  		//honeypot_add_form_protection($form, $form_state, array('honeypot', 'time_restriction'));
	}// else { drupal_set_message($form_id); }
	//drupal_set_message('<pre>'.print_r($form['field_email_address'], true).'</pre>');
	
	if ($form_id == 'workshop_node_form' || $form_id == 'event_node_form')
	{
		$form['field_scheduled_time']['#access'] = FALSE;
		$form['field_lid']['#access'] = FALSE;
	}
}

function bikebike_field_attach_view_alter(&$output, $context)
{
	if ($context['entity_type'] == 'node' && $context['display'] == 'teaser')
	{
		if ($context['entity']->field_host_organizations)
		{
			$out = '';
			foreach ($context['entity']->field_host_organizations['und'] as $org_info)
			{
				  $org = node_load($org_info['target_id']);
				  $output['field_host_organizations'][] = array(
				    '#type' => 'link',
				    '#href' => 'node/'.$org->nid,
				    '#title' => theme('image_style', array('style_name' => 'icon_meduim', 'path' => ($org->field_icon ? $org->field_icon['und'][0]['uri'] : variable_get('user_picture_default', '')), 'attributes' => array('class' => 'avatar'))).'<h3>'.$org->title.'</h3>',
				    '#attributes' => array('class' => 'org-profile', 'title' => $org->title),
				    '#options' => array(
				      'html' => TRUE,
				    ),
				  	//'#field_type' => 'entityreference'
				  );
				  $output['field_host_organizations']['#field_type'] = 'entityreference';
			}
		}
	}
}

function bikebike_host_organizations_field_attach_view_alter(&$output, $context)
{
	
}

/*function bikebike_menu_get_item_alter(&$item)
{
	_bikebike_show_object($item);
}*/

function bikebike_privatemsg_recipient_type_info()
{
	return array(
		'organization' => array(
			'name' => t('Organizations'),
			'description' => t('Enter the name of an organization.'),
			'load' => 'bikebike_privatemsg_orgs_load_multiple',
			'format' => 'bikebike_privatemsg_orgs_format',
			'autocomplete' => 'bikebike_privatemsg_orgs_autocomplete',
			'generate recipients' => 'bikebike_privatemsg_orgs_load_recipients',
			'count' => 'bikebike_privatemsg_orgs_count_recipients',
			'write access' => 'write privatemsg to organizations',
			'view access' => 'view organizations recipients',
		),
	);
}

function bikebike_privatemsg_orgs_load_multiple($rids)
{
	$result = db_query("SELECT title, nid AS recipient, type FROM {node} WHERE type = 'organization'");

	$orgs = array();
	foreach ($result as $org)
	{
		$orgs[privatemsg_recipient_key($org)] = $org;
	}
	//_bikebike_show_object($orgs);
	return $orgs;
}

/**
 * Format a role to be displayed as a recipient.
 */
function theme_bikebike_privatemsg_orgs_format($variables)
{
	$organization = $variables['recipient'];
	$options = $variables['options'];
	if (!empty($options['plain']))
	{
		$name = $organization->title;
		if (!empty($options['unique']))
		{
			$name .= ' [organization]';
		}
		return $name;
	}
	return $organization->title;
}

function bikebike_theme()
{
	return array(
		'bikebike_privatemsg_orgs_format' => array(
			'variables' => array('recipient' => NULL, 'options' => array()),
		),
		'form_table_theme_name' => array(
			'render element' => 'element'
		),
	);
}

/**
 * Loads users with a specific role.
 */
function bikebike_privatemsg_orgs_load_recipients($recipient, $limit, $offset)
{
	$nid = isset($recipient->recipient) ? $recipient->recipient : $recipient->nid;
	$result = db_query_range('SELECT field_administrators_target_id AS uid FROM {field_data_field_administrators} WHERE entity_id = :nid', $offset, $limit, array(':nid' => $nid));

	return $result->fetchCol();
}

/**
 * Return the number of users which have a given role.
 */
function bikebike_privatemsg_orgs_count_recipients($recipient)
{
	$nid = isset($recipient->recipient) ? $recipient->recipient : $recipient->nid;
	return db_query('SELECT field_administrators_target_id AS uid FROM {field_data_field_administrators} WHERE entity_id = :nid', array(':nid' => $nid))->fetchField();
}

/**
 * Provides autocomplete suggestions for roles.
 */
function bikebike_privatemsg_orgs_autocomplete($fragment, $names, $limit)
{
	$result = _privatemsg_assemble_query(array('autocomplete_organizations', 'privatemsg_organizations'), $fragment, $names)
	->range(0, $limit)
	->execute();
	$orgs = array();
	foreach ($result as $org)
	{
		$org->type = 'organization';
		//$org->name = 'poooop';
		$org->recipient = $org->nid;
		//_bikebike_show_object(privatemsg_recipient_key($org));
		$orgs[privatemsg_recipient_key($org)] = $org;
	}
	return $orgs;
}

/**
 * Implements hook_privatemsg_name_lookup().
 */
function bikebike_privatemsg_name_lookup($string)
{
	// Remove optional role specifier.
	$string = str_replace(t('[organization]'), '', $string);
	$org = db_query("SELECT *, nid AS recipient, type FROM {node} WHERE title = :title AND type = 'organization'", array(':title' => trim($string)))->fetchObject();
	if ($org)
	{
		return array(privatemsg_recipient_key($org) => $org);
	}
}

/**
 * Query definition to search for username autocomplete suggestions.
 *
 * @param $fragments
 *   Query fragments array.
 * @param $search
 *   Which search string is currently searched for.
 * @param $names
 *   Array of names not to be used as suggestions.
 */
function privatemsg_organizations_sql_autocomplete_organizations($search, $names)
{
	$query = db_select('node', 'node')
	->fields('node')
	->condition('node.title', $search . '%', 'LIKE')
	->condition('node.type', 'organization', '=')
	->orderBy('node.title', 'ASC');
	if (!empty($names))
	{
		$query->condition('node.title', $names, 'NOT IN');
	}
	return $query;
}

function bikebike_menu_local_tasks_alter(&$data, $router_item, $root_path)
{
	global $user;
	$add_to_array = array();
	//_bikebike_show_object($_GET['q']);
	switch ($root_path)
	{
		case 'node/%':
		case 'node/%/edit':
			$node = $router_item['page_arguments'][0];
			switch ($node->type)
			{
				case 'conference':
					$add_to_array[_bikebike_is_conference_organizer($user, $node) ? t('Registration') : (_bikebike_get_registation($user->uid, $node->nid) ? t('My Registration') : t('Register'))] = 'conferences/'.$node->nid.'/registration';
					$add_to_array[] = 'conferences/'.$node->nid.'/workshops';
					$add_to_array[] = 'conferences/'.$node->nid.'/schedule';
					break;
				case 'organization':
					$add_to_array[] = 'organizations/'.$node->nid.'/add-admin';
					$add_to_array[] = 'organizations/'.$node->nid.'/remove-admin';
					$add_to_array[] = 'organizations/'.$node->nid.'/cancel-request';
					if (node_access('update', $node) == NODE_ACCESS_ALLOW)
					{
						$notify = '';
						$request_count = _bikebike_request_count($node);
						if ($request_count)
						{
							$notify = '<span class="notify">'.$request_count.'</span>';
						}
						$add_to_array[t('Membership Management').$notify] = 'organizations/'.$node->nid.'/members';
					}
					else
					{
						$add_to_array[] = 'organizations/'.$node->nid.'/members';
					}
					break;
			}
			break;
		//case 'node/add/%':
		case 'conferences/%/workshops':
			$node = $router_item['page_arguments'][0];
			$add_to_array[t('Conference')] = 'node/'.$node->nid.'/view';
			$add_to_array[] = 'conferences/'.$node->nid.'/workshops';
			$add_to_array[] = 'node/add/workshop/'.$node->nid;
			break;
		case 'conferences/%/registration':
		case 'conferences/%/registration/manage':
		case 'conferences/%/registration/fields':
		case 'conferences/%/registration/registrations':
			$node = $router_item['page_arguments'][is_object($router_item['page_arguments'][0]) ? 0 : 1];
			$add_to_array[t('Conference')] = 'node/'.$node->nid.'/view';
			$add_to_array[] = 'conferences/'.$node->nid.'/registration';
			$add_to_array[] = 'conferences/'.$node->nid.'/registration/manage';
			$add_to_array[] = 'conferences/'.$node->nid.'/registration/fields';
			$add_to_array[] = 'conferences/'.$node->nid.'/registration/registrations';
			break;
		case 'organizations/%/members':
			$node = $router_item['page_arguments'][2];
			$add_to_array[] = 'node/'.$node->nid.'/view';
			$add_to_array[] = 'node/'.$node->nid.'/edit';
			$add_to_array[] = 'organizations/'.$node->nid.'/add-admin';
			$add_to_array[] = 'organizations/'.$node->nid.'/remove-admin';
			$add_to_array[] = 'organizations/'.$node->nid.'/cancel-request';
			if (node_access('update', $node) == NODE_ACCESS_ALLOW)
			{
				$notify = '';
				$request_count = _bikebike_request_count($node);
				if ($request_count)
				{
					$notify = '<span class="notify">'.$request_count.'</span>';
				}
				$add_to_array[t('Membership Management').$notify] = 'organizations/'.$node->nid.'/members';
			}
			else
			{
				$add_to_array[] = 'organizations/'.$node->nid.'/members';
			}
			break;
	}
	$count = 0;
	foreach ($add_to_array as $title => $add_to)
	{
		$item = menu_get_item($add_to);
		if ($item['access'])
		{
			if (!isset($data['tabs']))
			{
				$data['tabs'] = array(array('output' => array(), 'count' => 0));
			}
			if (!isset($data['tabs'][0]['count']))
			{
				$data['tabs'][0]['count'] = 0;
			}
			
			if (!is_numeric($title))
			{
				$item['title'] = $title;
			}
   			$data['tabs'][0]['output'][] = array(
       			'#theme' => 'menu_local_action',
       			'#link' => $item,
     			);
   			$data['tabs'][0]['count']++;
   		}
	}
	if (isset($data['tabs'][0]))
	{
		$icon_alises = array
		(
			'conferences-registration-manage' => 'node-options',
			'organizations-remove-admin' => 'node-delete',
			'organizations-cancel-request' => 'node-delete',
			'organizations-add-admin' => 'node-add',
			'node-add-workshop' => 'node-add',
			'conferences-registration-registrations' => 'members',
			'organizations-members' => 'members'
		);
		foreach ($data['tabs'][0]['output'] as $index => $tab)
		{
			switch ($root_path)
			{
				case 'node/%':
				case 'node/%/edit':
				case 'conferences/%/workshops':
				case 'conferences/%/registration':
				case 'conferences/%/registration/manage':
				case 'conferences/%/registration/fields':
				case 'conferences/%/registration/registrations':
				case 'organizations/%/members':
					$id = str_replace('/', '-', preg_replace('/\/(%)|(\d+)/', '', $tab['#link']['path']));
					$file = path_to_theme().'/images/tab-'.(isset($icon_alises[$id]) ? $icon_alises[$id] : $id).'.png';
					$image = '';
					if (file_exists($file))
					{
						$image = '<img src="/'.$file.'" />';
					}
					$data['tabs'][0]['output'][$index]['#link']['title'] = $image.'<span class="tab-title"><span class="tab-title-inner">'.$data['tabs'][0]['output'][$index]['#link']['title'].'</span></span>';
					$data['tabs'][0]['output'][$index]['#link']['localized_options']['attributes']['id'] = 'tab-'.$id;
					$data['tabs'][0]['output'][$index]['#link']['localized_options']['html'] = TRUE;
					break;
			}
		}
	}
}
