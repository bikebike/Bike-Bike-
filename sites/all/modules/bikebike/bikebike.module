<?php 

function bikebike_menu_alter(&$items)
{
	$items['entityreference/autocomplete/single/%/%/%'] = array(
			'title' => 'Entity Reference Autocomplete',
			'page callback' => 'bikebike_autocomplete_callback',
			'page arguments' => array(2, 3, 4, 5),
			'access callback' => 'entityreference_autocomplete_access_callback',
			'access arguments' => array(2, 3, 4, 5),
			'type' => MENU_CALLBACK,
	);
	$items['node/%node/edit']['access callback'] = 'bikebike_org_edit_access';
	$items['node/add/workshop/%']['access callback'] = 'bikebike_add_workshop_access';
	$items['node/add/workshop/%']['access arguments'] = array('create', 'workshop', 3);
	//$items['organization/%/edit']['access arguments'] = array(1);//'access arguments' = array(1);
	//drupal_set_message('<pre>'.print_r($items, true).'</pre>');
	
	return $items;
}

function bikebike_menu()
{
	$items = array
	(
		'organizations/%/add-admin' => array
		(
			'title' => 'Add Organization Administrator',
			'page callback' => 'drupal_get_form',
			//'page arguments' => array('bikebike_add_org_admin'),
			'description' => 'Add yourself as an organization administrator',
			'page arguments' => array('bikebike_add_org_admin', 1),
			'access callback' => TRUE,//'entityreference_autocomplete_access_callback',
			//'access arguments' => array(2, 3, 4, 5),
			'type' => MENU_CALLBACK
		),
		'conference-registration/%/cancel' => array
		(
			'title' => 'Add Organization Administrator',
			'page callback' => 'bikebike_change_registration',
			'page arguments' => array(1, false),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'conference-registration/%/confirm' => array
		(
			'title' => 'Add Organization Administrator',
			'page callback' => 'bikebike_change_registration',
			'page arguments' => array(1, true),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'admin/config/system/gitpull' => array
		(
			'title' => 'Pull From Git Repository',
			'page callback' => 'bikebike_git_pull',
			'description' => 'Updates the site from the GitHub Repository',
			'page arguments' => array(),
			'access callback' => 'bikebike_git_pull_access',//array('access git pull'),
			'type' => MENU_NORMAL_ITEM
		),
		'conference-registration/%/open' => array
		(
				'title' => 'Open Registraion',
				'page callback' => 'bikebike_conference_registration_open',
				'description' => 'Open Registration',
				'page arguments' => array(1, true),
				'access callback' => TRUE,
				'type' => MENU_CALLBACK
		),
		'conference-registration/%/close' => array
		(
				'title' => 'Close Registration',
				'page callback' => 'bikebike_conference_registration_open',
				'description' => 'Open Registration',
				'page arguments' => array(1, false),
				'access callback' => TRUE,
				'type' => MENU_CALLBACK
		)/*,
		'node/%/workshops' => array
		(
				'title' => 'Workshops',
				'page callback' => 'bikebike_conference_workshops',
				'description' => 'Workshops information',
				'page arguments' => array(),
				'access callback' => 'bikebike_git_pull_access',//array('access git pull'),
				'type' => MENU_NORMAL_ITEM
		)*/
	);
	return $items;
}

function bikebike_conference_registration_open($nid, $do_open)
{
	$reg = node_load($nid);
	global $user;
	if (!$reg || $reg->type != 'conference' || !bikebike_org_edit_access('edit', $reg))
	{
		drupal_set_message('You do not have sufficient privledges to edit this conference.', 'warning');
		drupal_goto('conferences');
	}
	else
	{
		$reg->field_registration_open[$reg->language][0]['value'] = ($do_open ? 1 : 0);
		node_save($reg);
		drupal_set_message('Registration is now '.($do_open ? 'open.' : 'closed.'));
		drupal_goto('node/'.$reg->nid);
	}
}

function bikebike_change_registration($crid, $confirm)
{
	$reg = node_load($crid);
	global $user;
	if (!$reg || $user->uid != $reg->uid || $reg->type != 'conference-registration')
	{
		drupal_set_message('The provided registration does not belong to you.', 'warning');
		drupal_goto('conferences');
	}
	else
	{
		$reg->field_attending_conference[$reg->language][0]['value'] = ($confirm ? 1 : 0);
		node_save($reg);
		drupal_set_message('Your registration has been '.($confirm ? 'confirmed.' : 'cancelled.'));
		drupal_goto('node/'.$reg->nid);
	}
}

function bikebike_git_pull_access()
{
	global $user;
	return in_array('administrator', array_values($user->roles));
}

function bikebike_permission()
{
	return array(
			'access git pull' => array(
					'title' => t('Access Pull From Git'),
					'description' => t('Access Pull From Git Repository.'),
			)
		);
}

function bikebike_git_pull()
{
	drupal_set_message('> git pull origin master <pre style="margin-left: 15px;">'.shell_exec('git pull origin master').'</pre>');
	
	module_load_include('module', 'backup_migrate');
	module_load_include('inc', 'backup_migrate', 'includes/destinations');
	module_load_include('inc', 'backup_migrate', 'includes/profiles');
	$location = drupal_realpath(backup_migrate_create_destination('file_manual', array('destination_id' => 'manual'))->location);

	$settings = _backup_migrate_profile_saved_default_profile(NULL);
	
	$files = glob("$location/*.aes");
	usort($files, function($a, $b) { return filemtime($a) < filemtime($b); });
	$scripts = 0;
	foreach ($files as $file)
	{
		$basename = basename($file);
		if (!db_query("SELECT COUNT(filename) FROM {backup_migrate_history} WHERE filename='$basename'")->fetchField())
		{
			backup_migrate_perform_restore('manual', $file, $settings);
			db_query("INSERT INTO {backup_migrate_history} (filename, date) VALUES ('$basename', NOW())");
			$scripts++;
		}
	}
	drupal_set_message(($scripts ?: 'No').' migration script'.($scripts === 1 ? '' : 's').' executed');
	variable_set('file_temporary_path', '/tmp');
	cache_clear_all();
	drupal_goto('admin/config/system/backup_migrate/destination/list/files/manual');
}

function bikebike_add_workshop_access($action, $type, $conference_id)
{
	//drupal_set_message('YUP');
	//drupal_set_message('<pre>'.print_r($node, true).'</pre>');
	global $user;
	
	if (in_array('administrator', array_values($user->roles)))
	{
		return TRUE;
	}
	
	$r = db_query("
			SELECT
				nid
			FROM
				{node}
			JOIN
				{field_data_field_conference} AS conference
				ON
					conference.entity_id = nid
			JOIN
				{field_data_field_attending_conference} AS attending
				ON
					attending.entity_id = nid
			WHERE
				type = 'conference_registration'
				AND
				uid = :uid
				AND
				field_conference_nid = :nid
				AND
				attending.field_attending_conference_value <> 0
			LIMIT
				1",
			array('uid' => $user->uid, 'nid' => $conference_id));
	return $r->rowCount() > 0;
}

function bikebike_org_edit_access($action, $node)
{
	global $user;
	if (in_array('administrator', array_values($user->roles)))
	{
		return TRUE;
	}
	
	if ($node && is_array($node) && isset($node['target_id']))
	{
		$node = node_load($node['target_id']);
	}
	
	if (!$node || !is_object($node))
	{
		return FALSE;
	}
	
	switch ($node->type)
	{
		case 'organization':
			foreach ((isset($node->field_administrators[$node->language]) ? $node->field_administrators[$node->language] : array()) as $admin)
			{
				if ($admin['target_id'] == $user->uid)
				{
					return TRUE;
				}
			}
			return FALSE;
		case 'conference':
			foreach ((isset($node->field_host_organizations[$node->language]) ? $node->field_host_organizations[$node->language] : array()) as $org)
			{
				if (bikebike_org_edit_access($action, $org))
				{
					return TRUE;
				}
			}
			return FALSE;
	}
	return node_access($action, $node);
}

function bikebike_add_org_admin($form_state, $args)
{
	$orgid = $args['build_info']['args'][0];
	$org = node_load($orgid);
	if (!$org || $org->type != 'organization')
	{
		drupal_set_message('Unknown organization');
		drupal_goto('organizations');
		return;
	}
	
	$language = $org->language;
	$secret_id = $org->field_organization_secret[$language][0]['value'];
	$secret = field_collection_item_load($secret_id, $reset = FALSE);
	
	$form['answer'] = array
	(
    	'#type' => 'textfield',
    	'#title' => t($secret->field_question[$language][0]['value']),
    	'#size' => 80,
    	'#required' => TRUE,
  	);
  	$form['submit'] = array
  	(
    	'#type' => 'submit',
    	'#value' => t('Submit'),
  	);
  	$form['orgid'] = array
  	(
  		'#type' => 'value',
  		'#value' => $orgid
  	);
  	$form['#method'] = 'post';
	return $form;
}

function bikebike_add_org_admin_submit($form, &$form_state)
{
	$orgid = $form['orgid']['#value'];
	$org = node_load($orgid);

	$language = $org->language;
	$secret_id = $org->field_organization_secret[$language][0]['value'];
	$secret = field_collection_item_load($secret_id, $reset = FALSE);
	$answer = $form['answer']['#value'];
	$real_answer = password_field_decrypt($secret->field_reply[$language][0]['password_field']);
	if ($real_answer == $answer)
	{
		global $user;
		$already_admin = false;
		foreach ((isset($org->field_administrators['und']) ? $org->field_administrators['und'] : array()) as $admin)
		{
			if ($admin['target_id'] == $user->uid)
			{
				$alreadyadmin = true;
			}
		}
		if (!$already_admin)
		{
			$org->field_administrators['und'][] = array('target_id' => $user->uid);
			node_save($org);
			drupal_set_message('You have been successfully registered as an administrator for '.$org->title);
			//drupal_set_message(print_r($org->field_administrators['und'], true));
		}
	}
	else
	{
		drupal_set_message('Sorry, the answer provided was not correct');
	}
	// Redirect the user to http://example.com/test/<Postcode> upon submit
	$form_state['redirect'] = 'node/'.$orgid;
}


function bikebike_autocomplete_callback($type, $field_name, $entity_type, $bundle_name, $entity_id = '', $string = '')
{
	$field = field_info_field($field_name);
	$instance = field_info_instance($entity_type, $field_name, $bundle_name);

	return bikebike_autocomplete_callback_get_matches($type, $field, $instance, $entity_type, $entity_id, $string);
}

function bikebike_autocomplete_callback_get_matches($type, $field, $instance, $entity_type, $entity_id = '', $string = '')
{
	$matches = array();

	$entity = NULL;
	if ($entity_id !== 'NULL')
	{
		$entity = entity_load_single($entity_type, $entity_id);
		if (!$entity || !entity_access('view', $entity_type, $entity))
		{
			return MENU_ACCESS_DENIED;
		}
	}
	
	$handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);
	$thumb = '';

	if ($type == 'tags')
	{
		// The user enters a comma-separated list of tags. We only autocomplete the last tag.
		$tags_typed = drupal_explode_tags($string);
		$tag_last = drupal_strtolower(array_pop($tags_typed));
		if (!empty($tag_last))
		{
			$prefix = count($tags_typed) ? implode(', ', $tags_typed) . ', ' : '';
		}
	}
	else
	{
		// The user enters a single tag.
		$prefix = '';
		$tag_last = $string;
	}

	if (isset($tag_last))
	{
		// Get an array of matching entities.
		$entity_labels = $handler->getReferencableEntities($tag_last, $instance['widget']['settings']['match_operator'], 10);

		// Loop through the products and convert them into autocomplete output.
		foreach ($entity_labels as $values) {
			foreach ($values as $entity_id => $label) {
				$target_type = $field['settings']['target_type'];
				if ($target_type == 'user')
				{
					$user = user_load($entity_id);
					$thumb = theme('image_style', array('style_name' => 'icon_small', 'path' => ($user->picture ? $user->picture->uri : variable_get('user_picture_default', '')), 'attributes' => array('class' => 'avatar')));
				}
				else// ($target_type == 'organization')
				{
					$node = node_load($entity_id);
					if ($node->type == 'organization')
					{
						$thumb = theme('image_style', array('style_name' => 'icon_small', 'path' => ($node->field_icon ? $node->field_icon['und'][0]['uri'] : variable_get('user_picture_default', '')), 'attributes' => array('class' => 'avatar')));
					}
				}
				
				$key = "$label ($entity_id)";
				// Strip things like starting/trailing white spaces, line breaks and tags.
				$key = preg_replace('/\s\s+/', ' ', str_replace("\n", '', trim(decode_entities(strip_tags($key)))));
				// Names containing commas or quotes must be wrapped in quotes.
				if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
					$key = '"' . str_replace('"', '""', $key) . '"';
				}
				//$matches[$prefix . $key] = '<div class="reference-autocomplete">'.$thumb.'<script>console.log(\''.print_r(json_encode($field['settings']['target_type']), true).'\');</script>'.$label.'</div>';
				$matches[$prefix . $key] = '<div class="reference-autocomplete">'.$thumb.$label.'</div>';
			}
		}
	}

	drupal_json_output($matches);
}

function bikebike_form_alter(&$form, $form_state, $form_id)
{
	if ($form_id == 'user_profile_form')
	{
		global $user;
		
		if (fboauth_fbid_load($user->uid))
		{
			unset($form['account']['pass']);
			unset($form['account']['current_pass']);
		}
	}
	else if ($form_id == 'organization_node_form')
	{
		if (!isset($form['nid']['#value']))
		{
		}
		else
		{
		}
	}
	else if ($form_id == 'conference_node_form')
	{
		global $user;
		if (!in_array('administrator', array_values($user->roles)))
		{
			$form['field_workshops_published']['#access'] = FALSE;
		}
	}
	else if ($form_id == 'workshop_node_form')
	{
		global $user;
		if (!in_array('administrator', array_values($user->roles)))
		{
			$form['field_scheduled_time']['#access'] = FALSE;
			$form['field_conference_location']['#access'] = FALSE;
		}
	}
	else if ($form_id == 'bikebike_add_org_admin')
	{
  		//honeypot_add_form_protection($form, $form_state, array('honeypot', 'time_restriction'));
	}// else { drupal_set_message($form_id); }
}

function bikebike_field_attach_view_alter(&$output, $context)
{
	if ($context['entity_type'] == 'node' && $context['display'] == 'teaser')
	{
		if ($context['entity']->field_host_organizations)
		{
			$out = '';
			foreach ($context['entity']->field_host_organizations['und'] as $org_info)
			{
				  $org = node_load($org_info['target_id']);
				  $output['field_host_organizations'][] = array(
				    '#type' => 'link',
				    '#href' => 'node/'.$org->nid,
				    '#title' => theme('image_style', array('style_name' => 'icon_meduim', 'path' => ($org->field_icon ? $org->field_icon['und'][0]['uri'] : variable_get('user_picture_default', '')), 'attributes' => array('class' => 'avatar'))).'<h3>'.$org->title.'</h3>',
				    '#attributes' => array('class' => 'org-profile', 'title' => $org->title),
				    '#options' => array(
				      'html' => TRUE,
				    ),
				  	//'#field_type' => 'entityreference'
				  );
				  $output['field_host_organizations']['#field_type'] = 'entityreference';
			}
		}
	}
}

function bikebike_host_organizations_field_attach_view_alter(&$output, $context)
{
	
}
