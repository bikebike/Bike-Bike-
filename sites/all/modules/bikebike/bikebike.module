<?php 

function bikebike_menu_alter(&$items)
{
	$items['entityreference/autocomplete/single/%/%/%'] = array(
			'title' => 'Entity Reference Autocomplete',
			'page callback' => 'bikebike_autocomplete_callback',
			'page arguments' => array(2, 3, 4, 5),
			'access callback' => 'entityreference_autocomplete_access_callback',
			'access arguments' => array(2, 3, 4, 5),
			'type' => MENU_CALLBACK,
	);
	$items['node/add/workshop/%']['access callback'] = 'bikebike_add_workshop_access';
	$items['node/add/workshop/%']['access arguments'] = array('create', 'workshop', 3);
	return $items;
}

function bikebike_menu()
{
	$items = array
	(
		'organizations/%/add-admin' => array
		(
			'title' => 'Add Organization Administrator',
			'page callback' => 'drupal_get_form',
			'description' => 'Add yourself as an organization administrator',
			'page arguments' => array('bikebike_add_member', 1, false, 'organization'),
			'access callback' => TRUE,//'entityreference_autocomplete_access_callback',
			'type' => MENU_CALLBACK
		),
		'organizations/%/remove-admin' => array
		(
			'title' => 'Remove Organization Administrator',
			'page callback' => 'drupal_get_form',
			'description' => 'Remove yourself as an organization administrator',
			'page arguments' => array('bikebike_add_member', 1, true, 'organization'),
			'access callback' => TRUE,//'entityreference_autocomplete_access_callback',
			'type' => MENU_CALLBACK
		),
		'workshops/%/add-coordinator' => array
		(
			'title' => 'Add Workshop Coordinator',
			'page callback' => 'drupal_get_form',
			'description' => 'Add yourself as a workshop coordinator',
			'page arguments' => array('bikebike_add_member', 1, false, 'workshop'),
			'access callback' => TRUE,//'entityreference_autocomplete_access_callback',
			'type' => MENU_CALLBACK
		),
		'workshops/%/remove-coordinator' => array
		(
			'title' => 'Remove Workshop Coordinator',
			'page callback' => 'drupal_get_form',
			'description' => 'Remove yourself as a workshop coordinator',
			'page arguments' => array('bikebike_add_member', 1, true, 'workshop'),
			'access callback' => TRUE,//'entityreference_autocomplete_access_callback',
			'type' => MENU_CALLBACK
		),
		'conference-registration/%/cancel' => array
		(
			'title' => 'Add Organization Administrator',
			'page callback' => 'bikebike_change_registration',
			'page arguments' => array(1, false),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'conference-registration/%/confirm' => array
		(
			'title' => 'Add Organization Administrator',
			'page callback' => 'bikebike_change_registration',
			'page arguments' => array(1, true),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'admin/config/system/gitpull' => array
		(
			'title' => 'Pull From Git Repository',
			'page callback' => 'bikebike_git_pull',
			'description' => 'Updates the site from the GitHub Repository',
			'page arguments' => array(),
			'access callback' => 'bikebike_git_pull_access',//array('access git pull'),
			'type' => MENU_NORMAL_ITEM
		),
		'conference-registration/%/open' => array
		(
			'title' => 'Open Registraion',
			'page callback' => 'bikebike_conference_registration_open',
			'description' => 'Open Registration',
			'page arguments' => array(1, true),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'conference-registration/%/close' => array
		(
			'title' => 'Close Registration',
			'page callback' => 'bikebike_conference_registration_open',
			'description' => 'Open Registration',
			'page arguments' => array(1, false),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'organizations/%/cancel-request' => array
		(
			'title' => 'Cancel Organization Administrator Request',
			'page callback' => 'bikebike_cancel_request',
			'description' => 'Cancel your request to be an organization administrator',
			'page arguments' => array(1, 'organization'),
			'access callback' => TRUE,//'entityreference_autocomplete_access_callback',
			'type' => MENU_CALLBACK
		),
		'workshops/%/cancel-request' => array
		(
			'title' => 'Cancel Workshop Coordinator Request',
			'page callback' => 'bikebike_cancel_request',
			'description' => 'Cancel your request to be an workshop coordinator',
			'page arguments' => array(1, 'workshop'),
			'access callback' => TRUE,//'entityreference_autocomplete_access_callback',
			'type' => MENU_CALLBACK
		),
		'organizations/%/requests' => array
		(
			'title' => 'Users Requesting Membership',
			'page callback' => 'drupal_get_form',
			'description' => 'Approve or Deny Membership to This Organization',
			'page arguments' => array('bikebike_requests_page', 'organization', 1),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'workshops/%/requests' => array
		(
			'title' => 'Users Requesting to Be Coordinators',
			'page callback' => 'drupal_get_form',
			'description' => 'Approve or Deny Coordinators for This Workshop',
			'page arguments' => array('bikebike_requests_page', 'workshop', 1),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'organizations/%/invitations' => array
		(
			'title' => 'Membership Invitations',
			'page callback' => 'drupal_get_form',
			'description' => 'Manage Membership Invitations',
			'page arguments' => array('bikebike_invitations_page', 'organization', 1),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'workshops/%/invitations' => array
		(
			'title' => 'Coordinator Invitations',
			'page callback' => 'drupal_get_form',
			'description' => 'Manage Coordinator Invitations',
			'page arguments' => array('bikebike_invitations_page', 'workshop', 1),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'organizations/%/accept-invitation/%' => array
		(
			'title' => 'Accept Organization Member Invitation',
			'page callback' => 'bikebike_accept_invitation',
			'page arguments' => array('organization', 1, 3, true),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'workshops/%/accept-invitation/%' => array
		(
			'title' => 'Accept Workshop Coordinator Invitation',
			'page callback' => 'bikebike_accept_invitation',
			'page arguments' => array('workshop', 1, 3, true),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'organizations/%/reject-invitation/%' => array
		(
			'title' => 'Reject Organization Member Invitation',
			'page callback' => 'bikebike_accept_invitation',
			'page arguments' => array('organization', 1, 3, false),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'workshops/%/reject-invitation/%' => array
		(
			'title' => 'Reject Workshop Coordinator Invitation',
			'page callback' => 'bikebike_accept_invitation',
			'page arguments' => array('workshop', 1, 3, false),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		)/*,
		'organizations/%/requests/%/approve' => array
		(
			'title' => 'Users Requesting Membership',
			'page callback' => 'bikebike_requests_approvedeny',
			'description' => 'Approve Membership to This Organization',
			'page arguments' => array('organization', 1, 3, true),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		),
		'organizations/%/requests/%/deny' => array
		(
			'title' => 'Deny Request',
			'page callback' => 'bikebike_requests_approvedeny',
			'description' => 'Deny Membership to This Organization',
			'page arguments' => array('organization', 1, 3, false),
			'access callback' => TRUE,
			'type' => MENU_CALLBACK
		)*/
		/*,
		'node/%/workshops' => array
		(
				'title' => 'Workshops',
				'page callback' => 'bikebike_conference_workshops',
				'description' => 'Workshops information',
				'page arguments' => array(),
				'access callback' => 'bikebike_git_pull_access',//array('access git pull'),
				'type' => MENU_NORMAL_ITEM
		)*/
	);
	return $items;
}

function bikebike_conference_registration_open($nid, $do_open)
{
	$reg = node_load($nid);
	global $user;
	if (!$reg || $reg->type != 'conference' || !node_access('update', $reg))
	{
		drupal_set_message('You do not have sufficient privledges to edit this conference.', 'warning');
		drupal_goto('conferences');
	}
	else
	{
		$reg->field_registration_open[$reg->language][0]['value'] = ($do_open ? 1 : 0);
		node_save($reg);
		drupal_set_message('Registration is now '.($do_open ? 'open.' : 'closed.'));
		drupal_goto('node/'.$reg->nid);
	}
}

function bikebike_change_registration($crid, $confirm)
{
	$reg = node_load($crid);
	global $user;
	if (!$reg || $user->uid != $reg->uid || $reg->type != 'conference-registration')
	{
		drupal_set_message('The provided registration does not belong to you.', 'warning');
		drupal_goto('conferences');
	}
	else
	{
		$reg->field_attending_conference[$reg->language][0]['value'] = ($confirm ? 1 : 0);
		node_save($reg);
		drupal_set_message('Your registration has been '.($confirm ? 'confirmed.' : 'cancelled.'));
		drupal_goto('node/'.$reg->nid);
	}
}

function bikebike_git_pull_access()
{
	global $user;
	return in_array('administrator', array_values($user->roles));
}

function bikebike_permission()
{
	return array(
			'access git pull' => array(
					'title' => t('Access Pull From Git'),
					'description' => t('Access Pull From Git Repository.'),
			)
		);
}

function bikebike_git_pull()
{
	drupal_set_message('> git pull origin master <pre style="margin-left: 15px;">'.shell_exec('git pull origin master').'</pre>');
	
	module_load_include('module', 'backup_migrate');
	module_load_include('inc', 'backup_migrate', 'includes/destinations');
	module_load_include('inc', 'backup_migrate', 'includes/profiles');
	$location = drupal_realpath(backup_migrate_create_destination('file_manual', array('destination_id' => 'manual'))->location);

	$settings = _backup_migrate_profile_saved_default_profile(NULL);
	
	$files = glob("$location/*.aes");
	usort($files, function($a, $b) { return filemtime($a) < filemtime($b); });
	$scripts = 0;
	foreach ($files as $file)
	{
		$basename = basename($file);
		if (!db_query("SELECT COUNT(filename) FROM {backup_migrate_history} WHERE filename='$basename'")->fetchField())
		{
			backup_migrate_perform_restore('manual', $file, $settings);
			db_query("INSERT INTO {backup_migrate_history} (filename, date) VALUES ('$basename', NOW())");
			$scripts++;
		}
	}
	drupal_set_message(($scripts ?: 'No').' migration script'.($scripts === 1 ? '' : 's').' executed');
	variable_set('file_temporary_path', '/tmp');
	cache_clear_all();
	drupal_goto('admin/config/system/backup_migrate/destination/list/files/manual');
}

function bikebike_add_workshop_access($action, $type, $conference_id)
{
	global $user;
	
	if (in_array('administrator', array_values($user->roles)))
	{
		return TRUE;
	}
	
	$r = db_query("
			SELECT
				nid
			FROM
				{node}
			JOIN
				{field_data_field_conference} AS conference
				ON
					conference.entity_id = nid
			JOIN
				{field_data_field_attending_conference} AS attending
				ON
					attending.entity_id = nid
			WHERE
				type = 'conference_registration'
				AND
				uid = :uid
				AND
				field_conference_nid = :nid
				AND
				attending.field_attending_conference_value <> 0
			LIMIT
				1",
			array('uid' => $user->uid, 'nid' => $conference_id));
	return $r->rowCount() > 0;
}

function bikebike_node_access($node, $op, $user)
{
	if (in_array('administrator', array_values($user->roles)))
	{
		return NODE_ACCESS_ALLOW;
	}
	
	if ($node && is_array($node) && isset($node['target_id']))
	{
		$node = node_load($node['target_id']);
	}
	
	if ($op == 'update')
	{
		if (is_string($node))
		{
			// check to see if the user is allowed to create a node
			return NODE_ACCESS_IGNORE;
		}
		
		if (!$node || !is_object($node))
		{
			return NODE_ACCESS_DENY;
		}
		
		switch ($node->type)
		{
			case 'organization':
				foreach ((isset($node->field_administrators[$node->language]) ? $node->field_administrators[$node->language] : array()) as $admin)
				{
					if ($admin['target_id'] == $user->uid)
					{
						return NODE_ACCESS_ALLOW;
					}
				}
				return NODE_ACCESS_DENY;
			case 'workshop':
				foreach ((isset($node->field_coordinators[$node->language]) ? $node->field_coordinators[$node->language] : array()) as $admin)
				{
					if ($admin['target_id'] == $user->uid)
					{
						return NODE_ACCESS_ALLOW;
					}
				}
				return NODE_ACCESS_DENY;
			case 'conference':
				foreach ((isset($node->field_host_organizations[$node->language]) ? $node->field_host_organizations[$node->language] : array()) as $org)
				{
					if (bikebike_node_access($org, $op, $user) == NODE_ACCESS_ALLOW)
					{
						return NODE_ACCESS_ALLOW;
					}
				}
				return NODE_ACCESS_DENY;
		}
	}
	else if ($op == 'view')
	{
		switch ($node->type)
		{
			case 'conference_registration':
				if ($node->uid == $user->uid)
				{
					return NODE_ACCESS_ALLOW;
					
				}
				return node_access($op, node_load($node->field_conference[$node->language][0]['nid']));
		}
	}
	return NODE_ACCESS_IGNORE;
}

function _bikebike_show_object($object)
{
	drupal_set_message('<pre>'.print_r($object, true).'</pre>');
}

function bikebike_requests_page_submit(&$form, &$form_state)
{
	$nid = $form['nid']['#value'];
	$node = node_load($nid);
	$request = node_load($form_state['clicked_button']['#array_parents'][1]);
	$accepted = ($form_state['clicked_button']['#parents'][0] == 'accept');
	
	$user = user_load($request->uid);
	switch ($node->type)
	{
		case 'organization':
		case 'workshop':
			$field = $node->type == 'organization' ? 'field_administrators' : 'field_coordinators';
			$already_admin = false;
			foreach ((isset($node->{$field}['und']) ? $node->{$field}['und'] : array()) as $admin)
			{
				if ($admin['target_id'] == $user->uid)
				{
					$alreadyadmin = true;
				}
			}
			if (!$already_admin)
			{
				$node->{$field}['und'][] = array('target_id' => $user->uid);
				node_save($node);
			}
			break;
	}
	$request->field_state['und'][0]['value'] = ($accepted ? 1 : -1);
	node_save($request);
	drupal_set_message($user->name.'\'s request to join '.$node->title.' has been '.($accepted ? 'accepted.' : 'denied.'));
	
	$form_state['redirect'] = $form['request_count']['#value'] > 1 ? null : 'node/'.$nid;
}

function bikebike_requests_page($form_state, $args)
{
	$nid = $args['build_info']['args'][1];
	$node = node_load($nid);
	if (!$node || $node->type != $args['build_info']['args'][0])
	{
		return;
	}
	
	$language = $node->language;
	
	$r = db_query("
			SELECT
				node.nid
			FROM
				{node}
			JOIN
				{field_data_field_node} AS n
				ON
					n.entity_id = node.nid
			JOIN
				{field_data_field_invitation} AS invite
				ON
					invite.entity_id = node.nid
			JOIN
				{field_data_field_state} AS state
				ON
					state.entity_id = node.nid
			WHERE
				type = 'request'
				AND
				n.field_node_nid = :nid
				AND
				invite.field_invitation_value = 0
				AND
				state.field_state_value = 0
			",
			array('nid' => $nid));
	
	$form['requests'] = array
	(
		'#type' => 'fieldset',
		'#title' => t('Requests:'),
		'#tree' => TRUE
	);
	
	foreach ($r as $result)
	{
		//drupal_set_message('<pre>'.print_r($result))
		$request = node_load($result->nid);
		$form['requests'][$request->nid] = array
		(
			'#type' => 'fieldset',
			//'#title' => t('Requests:'),
			'#tree' => FALSE
		);
		$form['requests'][$request->nid]['nid'] = array
		(
			'#type' => 'value',
			'#value' => $request->nid
		);
		$form['requests'][$request->nid]['user'] = array
		(
			'#type' => 'markup',
	    	'#markup' => drupal_render(user_view(user_load($request->uid), 'entityreference_view_widget'))
		);
		$form['requests'][$request->nid]['message'] = array
		(
			'#type' => 'markup',
			//'#title' => t('Message:'),
			'#markup' => '<label>Message:</label><p>'.$request->body['und'][0]['value'].'</p>'
		);
		$form['requests'][$request->nid]['accept'] = array(
			'#type' => 'submit',
			'#value' => t('Accept')//,
			//'#submit' => array('bikebike_add_org_admin_request'),
			//'#limit_validation_errors' => array()
		);
		$form['requests'][$request->nid]['deny'] = array(
			'#type' => 'submit',
			'#value' => t('Deny'),
			'#attributes' => array('class' => array('negative'))//,
			//'#submit' => array('bikebike_add_org_admin_cancel'),
			//'#limit_validation_errors' => array()
		);	
	}
	
	$form['nid'] = array
	(
		'#type' => 'value',
		'#value' => $nid
	);
	$form['request_count'] = array
	(
		'#type' => 'value',
		'#value' => $r->rowCount()
	);
	$form['#method'] = 'post';
  	$form['#redirect'] = 'node/'.$nid;
	return $form;
}

function bikebike_get_invitation($node, $email)
{
	$r = db_query("
			SELECT
				node.nid
			FROM
				node
			JOIN
				field_data_field_node AS n
				ON
					n.entity_id = node.nid
			JOIN
				field_data_field_invitation AS invite
				ON
					invite.entity_id = node.nid
			JOIN
				field_data_field_state AS state
				ON
					state.entity_id = node.nid
			JOIN
				field_data_field_email_address AS email
				ON
					email.entity_id = node.nid
			WHERE
				type = 'request'
				AND
				n.field_node_nid = :nid
				AND
				email.field_email_address_email = :email
				AND
				invite.field_invitation_value = 1
				AND
				state.field_state_value = 0
			LIMIT
				1
			",
			array('nid' => is_object($node) ? $node->nid : $node, 'email' => $email));
	return $r->rowCount() > 0 ? node_load($r->fetchField()) : null;
}

function bikebike_accept_invitation($type, $nid, $request_title, $do_accept)
{
	global $user;
	if (!$user)
	{
		// TODO: Handle this case, we should probably promt to log in, then redirect here again
	}
	else
	{
		$node = node_load($nid);
		$invitation = bikebike_get_invitation($node, $user->mail);
		$invite_node = $invitation ? node_load($invitation->field_node['und'][0]['nid']) : null;
		if (!$invitation || $type != $invite_node->type || $invitation->title !== $request_title)
		{
			drupal_set_message('Invitation does not exist', 'error');
		}
		else
		{
			if ($do_accept)
			{
				switch ($node->type)
				{
					case 'organization':
					case 'workshop':
						$field = $node->type == 'organization' ? 'field_administrators' : 'field_coordinators';
						$already_admin = false;
						foreach ((isset($node->{$field}['und']) ? $node->{$field}['und'] : array()) as $admin)
						{
							if ($admin['target_id'] == $user->uid)
							{
								$alreadyadmin = true;
							}
						}
						if (!$already_admin)
						{
							$node->{$field}['und'][] = array('target_id' => $user->uid);
							node_save($node);
						}
						break;
				}
				drupal_set_message('Succesfully added as a '.($type == 'organization' ? 'member' : 'coordinator').' of '.$node->title);
			}
			else
			{
				drupal_set_message('You have rejected your invitation.');
			}
			$invitation->field_state['und'][0]['value'] = ($do_accept ? 1 : -1);
			node_save($invitation);
			drupal_goto('node/'.$nid);
		}
	}
}

function _bikebike_user_load_from_email($email)
{
	$r = db_query('SELECT uid FROM users WHERE users.mail = :email LIMIT 1', array('email' => $email));
	if ($r->rowCount() > 0)
	{
		return user_load($r->fetchField());
	}
	return $email;
}

function bikebike_invitations_page($form_state, $args)
{
	$nid = $args['build_info']['args'][1];
	$node = node_load($nid);
	$type = $args['build_info']['args'][0];
	if (!$node || $node->type != $type)
	{
		return;
	}
	
	$language = $node->language;
	
	$field = $node->type == 'organization' ? 'field_administrators' : 'field_coordinators';
	
	$member_uids = array();
	$members = array();
	foreach ((isset($node->{$field}['und']) ? $node->{$field}['und'] : array()) as $admin)
	{
		$member = user_load($admin['target_id']);
		$members[] = $member;
		$member_uids[] = $member->uid;
		$member_emails[] = $member->mail;
	}
	
	$r = db_query("
			SELECT
				node.nid,
				email.field_email_address_email,
				users.uid
			FROM
				node
			JOIN
				field_data_field_node AS n
				ON
					n.entity_id = node.nid
			JOIN
				field_data_field_invitation AS invite
				ON
					invite.entity_id = node.nid
			JOIN
				field_data_field_state AS state
				ON
					state.entity_id = node.nid
			JOIN
				field_data_field_email_address AS email
				ON
					email.entity_id = node.nid
			LEFT OUTER JOIN
				users
				ON
					users.mail = email.field_email_address_email
			WHERE
				type = 'request'
				AND
				n.field_node_nid = :nid
				AND
				invite.field_invitation_value = 1
				AND
				state.field_state_value = 0
			",
			array('nid' => $nid));
	
	$cantinvite = "'".implode("', '", $member_emails)."'";
	
	if ($r->rowCount() > 0)
	{
		$form['invitations'] = array
		(
			'#type' => 'fieldset',
			'#title' => t('Invitations:'),
			'#tree' => TRUE
		);
		
		$checkboxes = array();
		
		foreach ($r as $result)
		{
			$cantinvite .= ", '".$result->field_email_address_email."'";
			$request = node_load($result->nid);
			$checkboxes[$result->nid] = $result->uid ? drupal_render(user_view(user_load($result->uid), 'entityreference_view_widget')) : $result->field_email_address_email;
		}
		
		$form['invitations']['members'] = array
		(
			'#type' => 'checkboxes',
			'#options' => $checkboxes,
			'#tree' => TRUE
		);
		
		$form['invitations']['cancelinvitations'] = array
		(
			'#type' => 'submit',
			'#value' => t('Cancel Selected Invitations'),
			'#submit' => array('bikebike_invitaions_page_cancelinvitations'),
			'#limit_validation_errors' => array()
		);
	}
	
	$form['emailinvite'] = array
	(
		'#type' => 'fieldset',
		'#title' => t('Invite by Email:'),
		'#tree' => TRUE
	);
	
	$form['emailinvite']['message'] = array
	(
		'#title' => t('Message:'),
		'#type' => 'textarea',
		'#description' => t('You may include a message in the request.'),
		'#default_value' => ''
	);
	$form['emailinvite']['emails'] = array
	(
		'#title' => t('Invite by Email:'),
		'#type' => 'textarea',
		'#description' => t('Invite users using their email, once the user registers they will be be given permission to join this '.$type.'. Multiple users may be invited by entering email addresses on seperate lines.'),
		'#default_value' => '',
		'#required' => TRUE,
	);
	$form['emailinvite']['emailinvite'] = array(
		'#type' => 'submit',
		'#value' => t('Submit'),
		'#submit' => array('bikebike_invitaions_page_emailinvite'),
		'#limit_validation_errors' => array()
	);
	
	$r = db_query("
			SELECT
				email.field_email_address_email,
				node.nid
			FROM
				{node}
			JOIN
				{field_data_field_node} AS n
				ON
					n.entity_id = node.nid
			JOIN
				{field_data_field_invitation} AS invite
				ON
					invite.entity_id = node.nid
			JOIN
				{field_data_field_state} AS state
				ON
					state.entity_id = node.nid
			JOIN
				field_data_field_email_address AS email
				ON
					email.entity_id = node.nid
			WHERE
				type = 'request'
				AND
				n.field_node_nid = :nid
				AND
				invite.field_invitation_value = 0
				AND
				state.field_state_value = 0
			",
			array('nid' => $nid));
	
	foreach ($r as $result)
	{
		$cantinvite .= ", '".$result->field_email_address_email."'";
	}
	
	$r = db_query('SELECT uid FROM users WHERE users.mail NOT IN('.$cantinvite.') AND users.uid > 0 ORDER BY users.name');
	$checkboxes = array();
	foreach ($r as $result)
	{
		$checkboxes[$result->uid] = drupal_render(user_view(user_load($result->uid), 'entityreference_view_widget'));
	}
	$form['invitemore'] = array
	(
		'#type' => 'fieldset',
		'#title' => t('Invite Other Members:'),
		'#tree' => TRUE
	);
	$form['invitemore']['message'] = array
	(
		'#title' => t('Message:'),
		'#type' => 'textarea',
		'#description' => t('You may include a message in the request.'),
		'#default_value' => ''
	);
	$form['invitemore']['filter'] = array
	(
		'#type' => 'textfield',
		'#title' => 'Filter Users By Name:'
	);
	$form['invitemore']['members'] = array
	(
		'#type' => 'checkboxes',
		'#options' => $checkboxes,
		'#tree' => TRUE
	);
	$form['invitemore']['invitemore'] = array(
		'#type' => 'submit',
		'#value' => t('Invite Selected Members'),
		'#submit' => array('bikebike_invitaions_page_invitemore'),
		'#limit_validation_errors' => array()
	);
	
	$form['done'] = array(
		'#type' => 'submit',
		'#value' => t('Done'),
		'#submit' => array('bikebike_add_member_cancel'),
		'#limit_validation_errors' => array()
	);
	
	$form['nid'] = array
	(
		'#type' => 'value',
		'#value' => $nid
	);
	$form['#method'] = 'post';
  	$form['#redirect'] = 'node/'.$nid;
	return $form;
}

function bikebike_invitaions_page_cancelinvitations($form, &$form_state)
{
	$invitations = $form['invitations']['members']['#value'];
	if (count($invitations) < 1)
	{
		drupal_set_message('Please select at least 1 request', 'error');
		return;
	}
	foreach ($invitations as $invitation)
	{
		node_delete($invitation);
	}
	//$nid = $form['nid']['#value'];
	//$node = node_load($nid);
	if (count($invitations) > 1)
	{
		drupal_set_message(count($invitations).' invitations have been cancelled.');
	}
	else
	{
		drupal_set_message('1 invitation has been cancelled.');
	}
}

function bikebike_invitaions_page_invitemore($form, &$form_state)
{
	$members = $form['invitemore']['members']['#value'];
	if (count($members) < 1)
	{
		drupal_set_message('You must select at least 1 member', 'error');
		return;
	}
	$nid = $form['nid']['#value'];
	$node = node_load($nid);
	//drupal_set_message(_bikebike_show_object($form['invitemore']['members']['#value']));
	foreach ($members as $uid)
	{
		$member = user_load($uid);
		bikebike_create_request($node, $form['invitemore']['message']['#value'], $member->mail, true);
	}
	if (count($members) > 1)
	{
		drupal_set_message(count($members).' invitations have been sent.');
	}
	else
	{
		drupal_set_message('An invitation has been sent to '.$member->name.'.');
	}
}

function bikebike_invitaions_page_emailinvite($form, &$form_state)
{
	$emails = preg_split('/\r\n|\n|\r/', $form['emailinvite']['emails']['#value']);
	if (count($emails) < 1)
	{
		drupal_set_message('At least 1 email is required', 'error');
		return;
	}
	$nid = $form['nid']['#value'];
	$node = node_load($nid);
	//drupal_set_message(_bikebike_show_object($form['invitemore']['members']['#value']));
	foreach ($emails as $email)
	{
		bikebike_create_request($node, null, trim($email), true);
	}
	if (count($emails) > 1)
	{
		drupal_set_message(count($emails).' invitations have been sent.');
	}
	else
	{
		drupal_set_message('An invitation has been sent to '.$emails[0].'.');
	}
}

function bikebike_add_member($form_state, $args)
{
	$nid = $args['build_info']['args'][0];
	$node = node_load($nid);
	$type = $args['build_info']['args'][2];
	if (!$node || $node->type != $type)
	{
		drupal_set_message('Unknown '.$args['build_info']['args'][2]);
		drupal_goto($args['build_info']['args'][2].'s');
		return;
	}
	
	$language = $node->language;
	
	if ($args['build_info']['args'][1] === true)
	{
		$form['remove'] = array
		(
			'#type' => 'fieldset',
			'#title' => t('Are you sure you want to be removed as a member of '.$node->title.'?'),
			'#tree' => TRUE
		);
		$form['remove']['remove'] = array(
			'#type' => 'submit',
			'#value' => t('Yes'),
			'#submit' => array('bikebike_add_member_remove'),
			'#limit_validation_errors' => array()
		);
		$form['actions']['cancel'] = array(
			'#type' => 'submit',
			'#value' => t('Cancel'),
			'#submit' => array('bikebike_add_member_cancel'),
			'#limit_validation_errors' => array()
		);
	}
	else
	{
		$show_secret = false;
		
		if ($type == 'organization')
		{
			$secret_id = (isset($node->field_organization_secret[$language]) && $node->field_organization_secret[$language][0]['value'] ? $node->field_organization_secret[$language][0]['value'] : null);
			$secret = $secret_id ? field_collection_item_load($secret_id, $reset = FALSE) : null;
			$show_secret = ($secret && isset($secret->field_question[$language]) && $secret->field_question[$language][0]['value'] && isset($secret->field_reply[$language]) && $secret->field_reply[$language][0]['password_field']);
		}
		
		if ($show_secret)
		{
			$form['secret'] = array
			(
				'#type' => 'fieldset',
				'#title' => t('Complete This Organization\'s Secret'),
				'#tree' => TRUE
			);
		  	$form['secret']['secret_p'] = array
		  	(
		    	'#type' => 'markup',
		    	'#markup' => '<p>You may automatically add yourself as a member of this organization by completing the following secret.</p>',
		  	);
			$form['secret']['answer'] = array
			(
		    	'#type' => 'textfield',
		    	'#title' => t($secret->field_question[$language][0]['value']),
		    	'#size' => 80,
		    	'#required' => TRUE,
		  	);
		  	$form['secret']['submit'] = array
		  	(
		    	'#type' => 'submit',
		    	'#value' => t('Submit'),
		  	);
		  	/*$form['request']['request_p'] = array
		  	(
		    	'#type' => 'markup',
		    	'#markup' => '<p>Alternatively, you may make a request to any of the current organizaion members. Once your request is seen, any member of the organization can accept or deny your request.</p>',
		  	);*/
		}
		$form['request'] = array
		(
			'#type' => 'fieldset',
			'#title' => t('Request Current Members to Add You'),
			'#tree' => TRUE
		);
		$form['request']['request_p'] = array
		(
			'#type' => 'markup',
			'#markup' => ($type == 'workshop' ? '<p>You may request the current coordinators to add you, any of the current coordinators may accept or deny your request.</p>' : '<p>'.($show_secret ? 'Alternatively, y' : 'Y').'ou may make a request to any of the current organizaion members. Once your request is seen, any member of the organization can accept or deny your request.</p>'),
		);
		$form['request']['message'] = array(
			'#title' => t('Message'),
			'#type' => 'textarea',
			'#description' => t('Adding a message is optional but may help to confirm who you are or what your intent is.'),
			'#default_value' => '',
		);
		$form['request']['request'] = array(
			'#type' => 'submit',
			'#value' => t('Make a Request'),
			'#submit' => array('bikebike_add_member_request'),
			'#limit_validation_errors' => array()
		);
		$form['actions']['cancel'] = array(
			'#type' => 'submit',
			'#value' => t('Cancel'),
			'#submit' => array('bikebike_add_member_cancel'),
			'#limit_validation_errors' => array()
		);	
	}
	
	$form['nid'] = array
	(
		'#type' => 'value',
		'#value' => $nid
	);
	$form['#method'] = 'post';
  	$form['#redirect'] = 'node/'.$nid;
	return $form;
}

function bikebike_add_member_validate(&$form, &$form_state)
{
	//return true;
}

function bikebike_add_member_submit($form, &$form_state)
{
	$nid = $form['nid']['#value'];
	$node = node_load($nid);

	$language = $node->language;
	$secret_id = $node->field_organization_secret[$language][0]['value'];
	$secret = field_collection_item_load($secret_id, $reset = FALSE);
	$answer = $form['secret']['answer']['#value'];
	$real_answer = password_field_decrypt($secret->field_reply[$language][0]['password_field']);
	if (strcasecmp($real_answer, $answer) === 0)
	{
		global $user;
		$already_admin = false;
		$field = $node->type == 'organization' ? 'field_administrators' : 'field_coordinators';
		foreach ((isset($node->{$field}['und']) ? $node->{$field}['und'] : array()) as $admin)
		{
			if ($admin['target_id'] == $user->uid)
			{
				$alreadyadmin = true;
			}
		}
		if (!$already_admin)
		{
			$node->{$field}['und'][] = array('target_id' => $user->uid);
			node_save($node);
			drupal_set_message('You have been successfully registered as an member of '.$node->title);
			//drupal_set_message(print_r($org->field_administrators['und'], true));
		}
	}
	else
	{
		drupal_set_message('Sorry, the answer provided was not correct');
	}
	// Redirect the user to http://example.com/test/<Postcode> upon submit
	$form_state['redirect'] = 'node/'.$nid;
}

function bikebike_add_member_remove($form, &$form_state)
{
	$nid = $form['nid']['#value'];
	$node = node_load($nid);

	$language = $node->language;
	global $user;
	$key = null;
	$field = $node->type == 'organization' ? 'field_administrators' : 'field_coordinators';
	foreach ((isset($node->{$field}['und']) ? $node->{$field}['und'] : array()) as $k => $admin)
	{
		if ($admin['target_id'] == $user->uid)
		{
			$key = $k;
		}
	}
	if ($key)
	{
		if (count($node->{$field}['und']) > 1)
		{
			unset($node->{$field}['und'][$key]);
			node_save($node);
			drupal_set_message('You have been successfully removed as a member of '.$node->title);
		}
		else
		{
			drupal_set_message('Could not remove you as a member of '.$node->title.'; there must be a minimum of one member at all times.', 'error');
		}
	}
	$form_state['redirect'] = 'node/'.$nid;
}

function bikebike_create_request($node, $message, $email = null, $is_invite = false)
{
	global $user;
	$request = new stdClass();
	$request->type = 'request';
	$request->uid = $user->uid;
	$request->body['und'][0]['value'] = $message;
	//drupal_set_message($user->language);
	$request->language = 'und';
	$request->field_node['und'][0]['nid'] = is_object($node) ? $node->nid : $node;
	$request->field_email_address['und'][0]['email'] = $email ?: $user->mail;
	$request->field_invitation['und'][0]['value'] = $is_invite ? 1 : 0;
	$request->field_state['und'][0]['value'] = 0;
	node_object_prepare($request);
	node_save($request);
}

function bikebike_request_query($node, $user)
{
	$nid = is_object($node) ? $node->nid : $node;
	$email = is_object($user) ? $user->mail : $user;
	$r = db_query("
			SELECT
				node.nid
			FROM
				{node}
			JOIN
				{field_data_field_node} AS n
				ON
					n.entity_id = nid
			JOIN
				{field_data_field_email_address} AS email
				ON
					email.entity_id = nid
			JOIN
				{field_data_field_state} AS state
				ON
					state.entity_id = nid
			WHERE
				type = 'request'
				AND
				n.field_node_nid = :nid
				AND
				email.field_email_address_email = :email
				AND
				state.field_state_value = 0
			LIMIT
				1",
			array('nid' => $nid, 'email' => $email));
	return $r;
}

function bikebike_create_request_exists($node, $user)
{
	return bikebike_request_query($node, $user)->rowCount() > 0;
}

function bikebike_cancel_request($node)
{
	global $user;
	$r = bikebike_request_query($node, $user);
	if ($r->rowCount() > 0)
	{
		node_delete($r->fetchField());
		drupal_set_message('Your request has been cancelled.');
	}
	drupal_goto('node/'.(is_object($node) ? $node->nid : $node));
}

function bikebike_add_member_cancel($form, &$form_state)
{
	$nid = $form['nid']['#value'];
	$form_state['redirect'] = 'node/'.$nid;
}

function bikebike_add_member_request($form, &$form_state)
{
	drupal_set_message('Your request has been sent.');
	$nid = $form['nid']['#value'];
	bikebike_create_request($nid, $form['request']['message']['#value']);
	$form_state['redirect'] = 'node/'.$nid;
}

function bikebike_autocomplete_callback($type, $field_name, $entity_type, $bundle_name, $entity_id = '', $string = '')
{
	$field = field_info_field($field_name);
	$instance = field_info_instance($entity_type, $field_name, $bundle_name);

	return bikebike_autocomplete_callback_get_matches($type, $field, $instance, $entity_type, $entity_id, $string);
}

function bikebike_autocomplete_callback_get_matches($type, $field, $instance, $entity_type, $entity_id = '', $string = '')
{
	$matches = array();

	$entity = NULL;
	if ($entity_id !== 'NULL')
	{
		$entity = entity_load_single($entity_type, $entity_id);
		if (!$entity || !entity_access('view', $entity_type, $entity))
		{
			return MENU_ACCESS_DENIED;
		}
	}
	
	$handler = entityreference_get_selection_handler($field, $instance, $entity_type, $entity);
	$thumb = '';

	if ($type == 'tags')
	{
		// The user enters a comma-separated list of tags. We only autocomplete the last tag.
		$tags_typed = drupal_explode_tags($string);
		$tag_last = drupal_strtolower(array_pop($tags_typed));
		if (!empty($tag_last))
		{
			$prefix = count($tags_typed) ? implode(', ', $tags_typed) . ', ' : '';
		}
	}
	else
	{
		// The user enters a single tag.
		$prefix = '';
		$tag_last = $string;
	}

	if (isset($tag_last))
	{
		// Get an array of matching entities.
		$entity_labels = $handler->getReferencableEntities($tag_last, $instance['widget']['settings']['match_operator'], 10);

		// Loop through the products and convert them into autocomplete output.
		foreach ($entity_labels as $values) {
			foreach ($values as $entity_id => $label) {
				$target_type = $field['settings']['target_type'];
				if ($target_type == 'user')
				{
					$user = user_load($entity_id);
					$thumb = theme('image_style', array('style_name' => 'icon_small', 'path' => ($user->picture ? $user->picture->uri : variable_get('user_picture_default', '')), 'attributes' => array('class' => 'avatar')));
				}
				else// ($target_type == 'organization')
				{
					$node = node_load($entity_id);
					if ($node->type == 'organization')
					{
						$thumb = theme('image_style', array('style_name' => 'icon_small', 'path' => ($node->field_icon ? $node->field_icon['und'][0]['uri'] : variable_get('user_picture_default', '')), 'attributes' => array('class' => 'avatar')));
					}
				}
				
				$key = "$label ($entity_id)";
				// Strip things like starting/trailing white spaces, line breaks and tags.
				$key = preg_replace('/\s\s+/', ' ', str_replace("\n", '', trim(decode_entities(strip_tags($key)))));
				// Names containing commas or quotes must be wrapped in quotes.
				if (strpos($key, ',') !== FALSE || strpos($key, '"') !== FALSE) {
					$key = '"' . str_replace('"', '""', $key) . '"';
				}
				//$matches[$prefix . $key] = '<div class="reference-autocomplete">'.$thumb.'<script>console.log(\''.print_r(json_encode($field['settings']['target_type']), true).'\');</script>'.$label.'</div>';
				$matches[$prefix . $key] = '<div class="reference-autocomplete">'.$thumb.$label.'</div>';
			}
		}
	}

	drupal_json_output($matches);
}

function bikebike_form_alter(&$form, $form_state, $form_id)
{
	if ($form_id == 'user_profile_form')
	{
		global $user;
		
		if (fboauth_fbid_load($user->uid))
		{
			unset($form['account']['pass']);
			unset($form['account']['current_pass']);
		}
	}
	else if ($form_id == 'organization_node_form')
	{
		global $user;
		if (empty($form['field_administrators'][$form['field_administrators']['#language']]['#default_value']))
		{
			$form['field_administrators'][$form['field_administrators']['#language']]['#default_value'] = array($user->uid);
		}
		$markup = '<div class="field-type-custom field-name-field-administrators-form form-wrapper" id="edit-field-administrators"><label>Members:</label><ul>';
		foreach ($form['field_administrators'][$form['field_administrators']['#language']]['#default_value'] as $uid)
		{
			$u = user_load($uid);
			$markup .= '<li>'.drupal_render(user_view($u, 'entityreference_view_widget')).'</li>';
		}
		$markup .= '</ul></div>';
		$form['field_administrators_view'] = array($form['field_administrators']['#language'] => array('#markup' => $markup), '#weight' => $form['field_administrators']['#weight']);//*/
		if (!in_array('administrator', array_values($user->roles)))
		{
			$form['field_administrators']['#access'] = FALSE;
		}
	}
	else if ($form_id == 'conference_node_form')
	{
		global $user;
		if (!in_array('administrator', array_values($user->roles)))
		{
			$form['field_workshops_published']['#access'] = FALSE;
		}
	}
	else if ($form_id == 'workshop_node_form')
	{
		global $user;
		if (!in_array('administrator', array_values($user->roles)))
		{
			$form['field_scheduled_time']['#access'] = FALSE;
			$form['field_conference_location']['#access'] = FALSE;
			if (empty($form['field_coordinators'][$form['field_coordinators']['#language']]['#default_value']))
			{
				$form['field_coordinators'][$form['field_coordinators']['#language']]['#default_value'] = array($user->uid);
			}
			$markup = '<div class="field-type-custom field-name-field-coordinators-form form-wrapper" id="edit-field-coordinators"><label>Coordinators:</label><ul>';
			foreach ($form['field_coordinators'][$form['field_coordinators']['#language']]['#default_value'] as $uid)
			{
				$u = user_load($uid);
				$markup .= '<li>'.drupal_render(user_view($u, 'entityreference_view_widget')).'</li>';
			}
			$markup .= '</ul></div>';
			$form['field_coordinators_view'] = array($form['field_coordinators']['#language'] => array('#markup' => $markup), '#weight' => $form['field_coordinators']['#weight']);
			$form['field_coordinators']['#access'] = FALSE;
		}
	}
	else if ($form_id == 'bikebike_add_member')
	{
  		//honeypot_add_form_protection($form, $form_state, array('honeypot', 'time_restriction'));
	}// else { drupal_set_message($form_id); }
	//drupal_set_message('<pre>'.print_r($form['field_email_address'], true).'</pre>');
}

function bikebike_field_attach_view_alter(&$output, $context)
{
	if ($context['entity_type'] == 'node' && $context['display'] == 'teaser')
	{
		if ($context['entity']->field_host_organizations)
		{
			$out = '';
			foreach ($context['entity']->field_host_organizations['und'] as $org_info)
			{
				  $org = node_load($org_info['target_id']);
				  $output['field_host_organizations'][] = array(
				    '#type' => 'link',
				    '#href' => 'node/'.$org->nid,
				    '#title' => theme('image_style', array('style_name' => 'icon_meduim', 'path' => ($org->field_icon ? $org->field_icon['und'][0]['uri'] : variable_get('user_picture_default', '')), 'attributes' => array('class' => 'avatar'))).'<h3>'.$org->title.'</h3>',
				    '#attributes' => array('class' => 'org-profile', 'title' => $org->title),
				    '#options' => array(
				      'html' => TRUE,
				    ),
				  	//'#field_type' => 'entityreference'
				  );
				  $output['field_host_organizations']['#field_type'] = 'entityreference';
			}
		}
	}
}

function bikebike_host_organizations_field_attach_view_alter(&$output, $context)
{
	
}

/*function bikebike_menu_get_item_alter(&$item)
{
	_bikebike_show_object($item);
}*/
